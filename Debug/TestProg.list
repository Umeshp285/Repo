
TestProg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000162c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080016ec  080016ec  000116ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001720  08001720  00011720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001728  08001728  00011728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800172c  0800172c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a0  2000000c  0800173c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000ac  0800173c  000200ac  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006743  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000014f0  00000000  00000000  00026777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a90  00000000  00000000  00027c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000588  00000000  00000000  0002a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006c0  00000000  00000000  0002ac80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002e9f  00000000  00000000  0002b340  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002075  00000000  00000000  0002e1df  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e50  00000000  00000000  000302d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080016d4 	.word	0x080016d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080016d4 	.word	0x080016d4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	1c08      	adds	r0, r1, #0
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__udivmoddi4>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	4657      	mov	r7, sl
 800028c:	464e      	mov	r6, r9
 800028e:	4645      	mov	r5, r8
 8000290:	46de      	mov	lr, fp
 8000292:	b5e0      	push	{r5, r6, r7, lr}
 8000294:	0004      	movs	r4, r0
 8000296:	b083      	sub	sp, #12
 8000298:	000d      	movs	r5, r1
 800029a:	4692      	mov	sl, r2
 800029c:	4699      	mov	r9, r3
 800029e:	428b      	cmp	r3, r1
 80002a0:	d82f      	bhi.n	8000302 <__udivmoddi4+0x7a>
 80002a2:	d02c      	beq.n	80002fe <__udivmoddi4+0x76>
 80002a4:	4649      	mov	r1, r9
 80002a6:	4650      	mov	r0, sl
 80002a8:	f000 f8ae 	bl	8000408 <__clzdi2>
 80002ac:	0029      	movs	r1, r5
 80002ae:	0006      	movs	r6, r0
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 f8a9 	bl	8000408 <__clzdi2>
 80002b6:	1a33      	subs	r3, r6, r0
 80002b8:	4698      	mov	r8, r3
 80002ba:	3b20      	subs	r3, #32
 80002bc:	469b      	mov	fp, r3
 80002be:	d500      	bpl.n	80002c2 <__udivmoddi4+0x3a>
 80002c0:	e074      	b.n	80003ac <__udivmoddi4+0x124>
 80002c2:	4653      	mov	r3, sl
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	001f      	movs	r7, r3
 80002ca:	4653      	mov	r3, sl
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	001e      	movs	r6, r3
 80002d2:	42af      	cmp	r7, r5
 80002d4:	d829      	bhi.n	800032a <__udivmoddi4+0xa2>
 80002d6:	d026      	beq.n	8000326 <__udivmoddi4+0x9e>
 80002d8:	465b      	mov	r3, fp
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	41bd      	sbcs	r5, r7
 80002de:	2b00      	cmp	r3, #0
 80002e0:	da00      	bge.n	80002e4 <__udivmoddi4+0x5c>
 80002e2:	e079      	b.n	80003d8 <__udivmoddi4+0x150>
 80002e4:	2200      	movs	r2, #0
 80002e6:	2300      	movs	r3, #0
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	465a      	mov	r2, fp
 80002f0:	4093      	lsls	r3, r2
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	4642      	mov	r2, r8
 80002f8:	4093      	lsls	r3, r2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	e019      	b.n	8000332 <__udivmoddi4+0xaa>
 80002fe:	4282      	cmp	r2, r0
 8000300:	d9d0      	bls.n	80002a4 <__udivmoddi4+0x1c>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <__udivmoddi4+0x8c>
 8000310:	601c      	str	r4, [r3, #0]
 8000312:	605d      	str	r5, [r3, #4]
 8000314:	9800      	ldr	r0, [sp, #0]
 8000316:	9901      	ldr	r1, [sp, #4]
 8000318:	b003      	add	sp, #12
 800031a:	bc3c      	pop	{r2, r3, r4, r5}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	46a2      	mov	sl, r4
 8000322:	46ab      	mov	fp, r5
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	42a3      	cmp	r3, r4
 8000328:	d9d6      	bls.n	80002d8 <__udivmoddi4+0x50>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	4643      	mov	r3, r8
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0e8      	beq.n	800030a <__udivmoddi4+0x82>
 8000338:	07fb      	lsls	r3, r7, #31
 800033a:	0872      	lsrs	r2, r6, #1
 800033c:	431a      	orrs	r2, r3
 800033e:	4646      	mov	r6, r8
 8000340:	087b      	lsrs	r3, r7, #1
 8000342:	e00e      	b.n	8000362 <__udivmoddi4+0xda>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d101      	bne.n	800034c <__udivmoddi4+0xc4>
 8000348:	42a2      	cmp	r2, r4
 800034a:	d80c      	bhi.n	8000366 <__udivmoddi4+0xde>
 800034c:	1aa4      	subs	r4, r4, r2
 800034e:	419d      	sbcs	r5, r3
 8000350:	2001      	movs	r0, #1
 8000352:	1924      	adds	r4, r4, r4
 8000354:	416d      	adcs	r5, r5
 8000356:	2100      	movs	r1, #0
 8000358:	3e01      	subs	r6, #1
 800035a:	1824      	adds	r4, r4, r0
 800035c:	414d      	adcs	r5, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d006      	beq.n	8000370 <__udivmoddi4+0xe8>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d9ee      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000366:	3e01      	subs	r6, #1
 8000368:	1924      	adds	r4, r4, r4
 800036a:	416d      	adcs	r5, r5
 800036c:	2e00      	cmp	r6, #0
 800036e:	d1f8      	bne.n	8000362 <__udivmoddi4+0xda>
 8000370:	465b      	mov	r3, fp
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	1900      	adds	r0, r0, r4
 8000378:	4169      	adcs	r1, r5
 800037a:	2b00      	cmp	r3, #0
 800037c:	db22      	blt.n	80003c4 <__udivmoddi4+0x13c>
 800037e:	002b      	movs	r3, r5
 8000380:	465a      	mov	r2, fp
 8000382:	40d3      	lsrs	r3, r2
 8000384:	002a      	movs	r2, r5
 8000386:	4644      	mov	r4, r8
 8000388:	40e2      	lsrs	r2, r4
 800038a:	001c      	movs	r4, r3
 800038c:	465b      	mov	r3, fp
 800038e:	0015      	movs	r5, r2
 8000390:	2b00      	cmp	r3, #0
 8000392:	db2c      	blt.n	80003ee <__udivmoddi4+0x166>
 8000394:	0026      	movs	r6, r4
 8000396:	409e      	lsls	r6, r3
 8000398:	0033      	movs	r3, r6
 800039a:	0026      	movs	r6, r4
 800039c:	4647      	mov	r7, r8
 800039e:	40be      	lsls	r6, r7
 80003a0:	0032      	movs	r2, r6
 80003a2:	1a80      	subs	r0, r0, r2
 80003a4:	4199      	sbcs	r1, r3
 80003a6:	9000      	str	r0, [sp, #0]
 80003a8:	9101      	str	r1, [sp, #4]
 80003aa:	e7ae      	b.n	800030a <__udivmoddi4+0x82>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4652      	mov	r2, sl
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	4641      	mov	r1, r8
 80003b8:	0013      	movs	r3, r2
 80003ba:	464a      	mov	r2, r9
 80003bc:	408a      	lsls	r2, r1
 80003be:	0017      	movs	r7, r2
 80003c0:	431f      	orrs	r7, r3
 80003c2:	e782      	b.n	80002ca <__udivmoddi4+0x42>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	002a      	movs	r2, r5
 80003cc:	4646      	mov	r6, r8
 80003ce:	409a      	lsls	r2, r3
 80003d0:	0023      	movs	r3, r4
 80003d2:	40f3      	lsrs	r3, r6
 80003d4:	4313      	orrs	r3, r2
 80003d6:	e7d5      	b.n	8000384 <__udivmoddi4+0xfc>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	9100      	str	r1, [sp, #0]
 80003e4:	9201      	str	r2, [sp, #4]
 80003e6:	2201      	movs	r2, #1
 80003e8:	40da      	lsrs	r2, r3
 80003ea:	9201      	str	r2, [sp, #4]
 80003ec:	e782      	b.n	80002f4 <__udivmoddi4+0x6c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	2320      	movs	r3, #32
 80003f2:	0026      	movs	r6, r4
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	002f      	movs	r7, r5
 80003fa:	46b4      	mov	ip, r6
 80003fc:	4097      	lsls	r7, r2
 80003fe:	4666      	mov	r6, ip
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c9      	b.n	800039a <__udivmoddi4+0x112>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000460:	20fa      	movs	r0, #250	; 0xfa
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <HAL_InitTick+0x3c>)
 8000464:	0080      	lsls	r0, r0, #2
 8000466:	7819      	ldrb	r1, [r3, #0]
 8000468:	f7ff fe62 	bl	8000130 <__udivsi3>
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <HAL_InitTick+0x40>)
 800046e:	0001      	movs	r1, r0
 8000470:	6818      	ldr	r0, [r3, #0]
 8000472:	f7ff fe5d 	bl	8000130 <__udivsi3>
 8000476:	f000 f86b 	bl	8000550 <HAL_SYSTICK_Config>
 800047a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800047c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800047e:	2c00      	cmp	r4, #0
 8000480:	d109      	bne.n	8000496 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000482:	2d03      	cmp	r5, #3
 8000484:	d807      	bhi.n	8000496 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000486:	3802      	subs	r0, #2
 8000488:	0022      	movs	r2, r4
 800048a:	0029      	movs	r1, r5
 800048c:	f000 f830 	bl	80004f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000490:	0020      	movs	r0, r4
 8000492:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <HAL_InitTick+0x44>)
 8000494:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	20000000 	.word	0x20000000
 800049c:	20000008 	.word	0x20000008
 80004a0:	20000004 	.word	0x20000004

080004a4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004a4:	2340      	movs	r3, #64	; 0x40
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <HAL_Init+0x24>)
{
 80004a8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004aa:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ac:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004ae:	430b      	orrs	r3, r1
 80004b0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004b2:	f7ff ffd3 	bl	800045c <HAL_InitTick>
 80004b6:	1e04      	subs	r4, r0, #0
 80004b8:	d103      	bne.n	80004c2 <HAL_Init+0x1e>
    HAL_MspInit();
 80004ba:	f001 f843 	bl	8001544 <HAL_MspInit>
}
 80004be:	0020      	movs	r0, r4
 80004c0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004c2:	2401      	movs	r4, #1
 80004c4:	e7fb      	b.n	80004be <HAL_Init+0x1a>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40022000 	.word	0x40022000

080004cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80004cc:	4a03      	ldr	r2, [pc, #12]	; (80004dc <HAL_IncTick+0x10>)
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <HAL_IncTick+0x14>)
 80004d0:	6811      	ldr	r1, [r2, #0]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	185b      	adds	r3, r3, r1
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	4770      	bx	lr
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	20000028 	.word	0x20000028
 80004e0:	20000000 	.word	0x20000000

080004e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004e4:	4b01      	ldr	r3, [pc, #4]	; (80004ec <HAL_GetTick+0x8>)
 80004e6:	6818      	ldr	r0, [r3, #0]
}
 80004e8:	4770      	bx	lr
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	20000028 	.word	0x20000028

080004f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004f4:	2800      	cmp	r0, #0
 80004f6:	da14      	bge.n	8000522 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	230f      	movs	r3, #15
 80004fa:	b2c0      	uxtb	r0, r0
 80004fc:	4003      	ands	r3, r0
 80004fe:	3b08      	subs	r3, #8
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <HAL_NVIC_SetPriority+0x58>)
 8000502:	089b      	lsrs	r3, r3, #2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	189b      	adds	r3, r3, r2
 8000508:	2203      	movs	r2, #3
 800050a:	4010      	ands	r0, r2
 800050c:	4090      	lsls	r0, r2
 800050e:	32fc      	adds	r2, #252	; 0xfc
 8000510:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000512:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000514:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000516:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000518:	69dc      	ldr	r4, [r3, #28]
 800051a:	43ac      	bics	r4, r5
 800051c:	4321      	orrs	r1, r4
 800051e:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000520:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000522:	2503      	movs	r5, #3
 8000524:	0883      	lsrs	r3, r0, #2
 8000526:	4028      	ands	r0, r5
 8000528:	40a8      	lsls	r0, r5
 800052a:	35fc      	adds	r5, #252	; 0xfc
 800052c:	002e      	movs	r6, r5
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <HAL_NVIC_SetPriority+0x5c>)
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	189b      	adds	r3, r3, r2
 8000534:	22c0      	movs	r2, #192	; 0xc0
 8000536:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000538:	4029      	ands	r1, r5
 800053a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053c:	0092      	lsls	r2, r2, #2
 800053e:	589c      	ldr	r4, [r3, r2]
 8000540:	43b4      	bics	r4, r6
 8000542:	4321      	orrs	r1, r4
 8000544:	5099      	str	r1, [r3, r2]
 8000546:	e7eb      	b.n	8000520 <HAL_NVIC_SetPriority+0x30>
 8000548:	e000ed00 	.word	0xe000ed00
 800054c:	e000e100 	.word	0xe000e100

08000550 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <HAL_SYSTICK_Config+0x28>)
 8000552:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000554:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000556:	4293      	cmp	r3, r2
 8000558:	d80d      	bhi.n	8000576 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055e:	4808      	ldr	r0, [pc, #32]	; (8000580 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000560:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000562:	6a03      	ldr	r3, [r0, #32]
 8000564:	0609      	lsls	r1, r1, #24
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	0a1b      	lsrs	r3, r3, #8
 800056a:	430b      	orrs	r3, r1
 800056c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800056e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000570:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000572:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000574:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000576:	4770      	bx	lr
 8000578:	00ffffff 	.word	0x00ffffff
 800057c:	e000e010 	.word	0xe000e010
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000586:	4a58      	ldr	r2, [pc, #352]	; (80006e8 <HAL_GPIO_Init+0x164>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000588:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800058a:	1882      	adds	r2, r0, r2
 800058c:	1e54      	subs	r4, r2, #1
 800058e:	41a2      	sbcs	r2, r4
{
 8000590:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8000592:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 8000594:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000596:	3205      	adds	r2, #5
{
 8000598:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800059a:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800059c:	9a04      	ldr	r2, [sp, #16]
 800059e:	40da      	lsrs	r2, r3
 80005a0:	d101      	bne.n	80005a6 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80005a2:	b007      	add	sp, #28
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005a6:	2601      	movs	r6, #1
 80005a8:	0037      	movs	r7, r6
 80005aa:	409f      	lsls	r7, r3
 80005ac:	9a04      	ldr	r2, [sp, #16]
 80005ae:	403a      	ands	r2, r7
 80005b0:	9202      	str	r2, [sp, #8]
    if (iocurrent)
 80005b2:	d100      	bne.n	80005b6 <HAL_GPIO_Init+0x32>
 80005b4:	e095      	b.n	80006e2 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005b6:	9a03      	ldr	r2, [sp, #12]
 80005b8:	6852      	ldr	r2, [r2, #4]
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	2210      	movs	r2, #16
 80005be:	9d01      	ldr	r5, [sp, #4]
 80005c0:	4395      	bics	r5, r2
 80005c2:	1e6a      	subs	r2, r5, #1
 80005c4:	42b2      	cmp	r2, r6
 80005c6:	d813      	bhi.n	80005f0 <HAL_GPIO_Init+0x6c>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005c8:	2403      	movs	r4, #3
 80005ca:	0059      	lsls	r1, r3, #1
 80005cc:	408c      	lsls	r4, r1
 80005ce:	468c      	mov	ip, r1
        temp = GPIOx->OSPEEDR;
 80005d0:	6882      	ldr	r2, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005d2:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005d4:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005d6:	68cc      	ldr	r4, [r1, #12]
 80005d8:	4661      	mov	r1, ip
 80005da:	408c      	lsls	r4, r1
 80005dc:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80005de:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005e0:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OTYPER;
 80005e2:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005e4:	0912      	lsrs	r2, r2, #4
 80005e6:	4032      	ands	r2, r6
 80005e8:	409a      	lsls	r2, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ea:	43bc      	bics	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005ec:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005ee:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80005f0:	2203      	movs	r2, #3
 80005f2:	005f      	lsls	r7, r3, #1
 80005f4:	40ba      	lsls	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005f6:	9903      	ldr	r1, [sp, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80005f8:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005fa:	688c      	ldr	r4, [r1, #8]
      temp = GPIOx->PUPDR;
 80005fc:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005fe:	40bc      	lsls	r4, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000600:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000602:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000604:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000606:	2d02      	cmp	r5, #2
 8000608:	d10e      	bne.n	8000628 <HAL_GPIO_Init+0xa4>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800060a:	210f      	movs	r1, #15
 800060c:	3505      	adds	r5, #5
 800060e:	401d      	ands	r5, r3
 8000610:	00ad      	lsls	r5, r5, #2
 8000612:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8000614:	08dc      	lsrs	r4, r3, #3
 8000616:	00a4      	lsls	r4, r4, #2
 8000618:	1904      	adds	r4, r0, r4
 800061a:	6a26      	ldr	r6, [r4, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800061c:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800061e:	9903      	ldr	r1, [sp, #12]
 8000620:	6909      	ldr	r1, [r1, #16]
 8000622:	40a9      	lsls	r1, r5
 8000624:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000626:	6226      	str	r6, [r4, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000628:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 800062a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800062c:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800062e:	9c01      	ldr	r4, [sp, #4]
 8000630:	4034      	ands	r4, r6
 8000632:	40bc      	lsls	r4, r7
 8000634:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000636:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000638:	9a01      	ldr	r2, [sp, #4]
 800063a:	00d2      	lsls	r2, r2, #3
 800063c:	d551      	bpl.n	80006e2 <HAL_GPIO_Init+0x15e>
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800063e:	001d      	movs	r5, r3
 8000640:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	2101      	movs	r1, #1
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000644:	4035      	ands	r5, r6
 8000646:	00ad      	lsls	r5, r5, #2
 8000648:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4c28      	ldr	r4, [pc, #160]	; (80006ec <HAL_GPIO_Init+0x168>)
 800064c:	468c      	mov	ip, r1
 800064e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000650:	430a      	orrs	r2, r1
 8000652:	6362      	str	r2, [r4, #52]	; 0x34
 8000654:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <HAL_GPIO_Init+0x16c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000656:	089c      	lsrs	r4, r3, #2
 8000658:	00a4      	lsls	r4, r4, #2
 800065a:	18a4      	adds	r4, r4, r2
 800065c:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800065e:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000660:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000662:	0011      	movs	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000664:	05ff      	lsls	r7, r7, #23
 8000666:	2200      	movs	r2, #0
 8000668:	42b8      	cmp	r0, r7
 800066a:	d010      	beq.n	800068e <HAL_GPIO_Init+0x10a>
 800066c:	4f21      	ldr	r7, [pc, #132]	; (80006f4 <HAL_GPIO_Init+0x170>)
 800066e:	4662      	mov	r2, ip
 8000670:	42b8      	cmp	r0, r7
 8000672:	d00c      	beq.n	800068e <HAL_GPIO_Init+0x10a>
 8000674:	4f20      	ldr	r7, [pc, #128]	; (80006f8 <HAL_GPIO_Init+0x174>)
 8000676:	1892      	adds	r2, r2, r2
 8000678:	42b8      	cmp	r0, r7
 800067a:	d008      	beq.n	800068e <HAL_GPIO_Init+0x10a>
 800067c:	4f1f      	ldr	r7, [pc, #124]	; (80006fc <HAL_GPIO_Init+0x178>)
 800067e:	0032      	movs	r2, r6
 8000680:	42b8      	cmp	r0, r7
 8000682:	d004      	beq.n	800068e <HAL_GPIO_Init+0x10a>
 8000684:	4e1e      	ldr	r6, [pc, #120]	; (8000700 <HAL_GPIO_Init+0x17c>)
 8000686:	4462      	add	r2, ip
 8000688:	42b0      	cmp	r0, r6
 800068a:	d000      	beq.n	800068e <HAL_GPIO_Init+0x10a>
 800068c:	9a05      	ldr	r2, [sp, #20]
 800068e:	40aa      	lsls	r2, r5
 8000690:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8000692:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000694:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8000696:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 8000698:	4a1a      	ldr	r2, [pc, #104]	; (8000704 <HAL_GPIO_Init+0x180>)
        temp &= ~((uint32_t)iocurrent);
 800069a:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 800069c:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800069e:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80006a0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006a2:	03c9      	lsls	r1, r1, #15
 80006a4:	d401      	bmi.n	80006aa <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 80006a6:	0035      	movs	r5, r6
 80006a8:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80006aa:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006ac:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80006ae:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006b0:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80006b2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006b4:	0389      	lsls	r1, r1, #14
 80006b6:	d401      	bmi.n	80006bc <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 80006b8:	0035      	movs	r5, r6
 80006ba:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80006bc:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006be:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80006c0:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006c2:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80006c4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006c6:	02c9      	lsls	r1, r1, #11
 80006c8:	d401      	bmi.n	80006ce <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 80006ca:	0035      	movs	r5, r6
 80006cc:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80006ce:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006d0:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80006d2:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006d4:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80006d6:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006d8:	0289      	lsls	r1, r1, #10
 80006da:	d401      	bmi.n	80006e0 <HAL_GPIO_Init+0x15c>
        temp &= ~((uint32_t)iocurrent);
 80006dc:	4025      	ands	r5, r4
 80006de:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80006e0:	60d6      	str	r6, [r2, #12]
    position++;
 80006e2:	3301      	adds	r3, #1
 80006e4:	e75a      	b.n	800059c <HAL_GPIO_Init+0x18>
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	afffe400 	.word	0xafffe400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010000 	.word	0x40010000
 80006f4:	50000400 	.word	0x50000400
 80006f8:	50000800 	.word	0x50000800
 80006fc:	50000c00 	.word	0x50000c00
 8000700:	50001000 	.word	0x50001000
 8000704:	40010400 	.word	0x40010400

08000708 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000708:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_RCC_GetSysClockFreq+0x64>)
{
 800070c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800070e:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000710:	400a      	ands	r2, r1
 8000712:	2a08      	cmp	r2, #8
 8000714:	d026      	beq.n	8000764 <HAL_RCC_GetSysClockFreq+0x5c>
 8000716:	2a0c      	cmp	r2, #12
 8000718:	d006      	beq.n	8000728 <HAL_RCC_GetSysClockFreq+0x20>
 800071a:	2a04      	cmp	r2, #4
 800071c:	d11a      	bne.n	8000754 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	06db      	lsls	r3, r3, #27
 8000722:	d421      	bmi.n	8000768 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000724:	4812      	ldr	r0, [pc, #72]	; (8000770 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000726:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000728:	028a      	lsls	r2, r1, #10
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <HAL_RCC_GetSysClockFreq+0x6c>)
 800072c:	0f12      	lsrs	r2, r2, #28
 800072e:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000730:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000732:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000734:	0f89      	lsrs	r1, r1, #30
 8000736:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000738:	03c0      	lsls	r0, r0, #15
 800073a:	d504      	bpl.n	8000746 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 800073c:	480e      	ldr	r0, [pc, #56]	; (8000778 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800073e:	4350      	muls	r0, r2
 8000740:	f7ff fcf6 	bl	8000130 <__udivsi3>
 8000744:	e7ef      	b.n	8000726 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	06db      	lsls	r3, r3, #27
 800074a:	d501      	bpl.n	8000750 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <HAL_RCC_GetSysClockFreq+0x74>)
 800074e:	e7f6      	b.n	800073e <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <HAL_RCC_GetSysClockFreq+0x68>)
 8000752:	e7f4      	b.n	800073e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000754:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000756:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000758:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800075e:	3301      	adds	r3, #1
 8000760:	4098      	lsls	r0, r3
 8000762:	e7e0      	b.n	8000726 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <HAL_RCC_GetSysClockFreq+0x70>)
 8000766:	e7de      	b.n	8000726 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800076a:	e7dc      	b.n	8000726 <HAL_RCC_GetSysClockFreq+0x1e>
 800076c:	40021000 	.word	0x40021000
 8000770:	00f42400 	.word	0x00f42400
 8000774:	08001715 	.word	0x08001715
 8000778:	007a1200 	.word	0x007a1200
 800077c:	003d0900 	.word	0x003d0900

08000780 <HAL_RCC_OscConfig>:
{
 8000780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000782:	0005      	movs	r5, r0
 8000784:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000786:	2800      	cmp	r0, #0
 8000788:	d102      	bne.n	8000790 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800078a:	2001      	movs	r0, #1
}
 800078c:	b007      	add	sp, #28
 800078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000790:	230c      	movs	r3, #12
 8000792:	4cc2      	ldr	r4, [pc, #776]	; (8000a9c <HAL_RCC_OscConfig+0x31c>)
 8000794:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000796:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000798:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	025b      	lsls	r3, r3, #9
 800079e:	401a      	ands	r2, r3
 80007a0:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007a2:	6802      	ldr	r2, [r0, #0]
 80007a4:	07d2      	lsls	r2, r2, #31
 80007a6:	d441      	bmi.n	800082c <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007a8:	682b      	ldr	r3, [r5, #0]
 80007aa:	079b      	lsls	r3, r3, #30
 80007ac:	d500      	bpl.n	80007b0 <HAL_RCC_OscConfig+0x30>
 80007ae:	e087      	b.n	80008c0 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007b0:	682b      	ldr	r3, [r5, #0]
 80007b2:	06db      	lsls	r3, r3, #27
 80007b4:	d528      	bpl.n	8000808 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d000      	beq.n	80007bc <HAL_RCC_OscConfig+0x3c>
 80007ba:	e0e1      	b.n	8000980 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	059b      	lsls	r3, r3, #22
 80007c0:	d502      	bpl.n	80007c8 <HAL_RCC_OscConfig+0x48>
 80007c2:	69eb      	ldr	r3, [r5, #28]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0e0      	beq.n	800078a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007c8:	6862      	ldr	r2, [r4, #4]
 80007ca:	49b5      	ldr	r1, [pc, #724]	; (8000aa0 <HAL_RCC_OscConfig+0x320>)
 80007cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007ce:	400a      	ands	r2, r1
 80007d0:	431a      	orrs	r2, r3
 80007d2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007d4:	6861      	ldr	r1, [r4, #4]
 80007d6:	6a2a      	ldr	r2, [r5, #32]
 80007d8:	0209      	lsls	r1, r1, #8
 80007da:	0a09      	lsrs	r1, r1, #8
 80007dc:	0612      	lsls	r2, r2, #24
 80007de:	430a      	orrs	r2, r1
 80007e0:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	0b5b      	lsrs	r3, r3, #13
 80007e6:	3301      	adds	r3, #1
 80007e8:	0212      	lsls	r2, r2, #8
 80007ea:	409a      	lsls	r2, r3
 80007ec:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80007ee:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80007f0:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80007f2:	060a      	lsls	r2, r1, #24
 80007f4:	49ab      	ldr	r1, [pc, #684]	; (8000aa4 <HAL_RCC_OscConfig+0x324>)
 80007f6:	0f12      	lsrs	r2, r2, #28
 80007f8:	5c8a      	ldrb	r2, [r1, r2]
 80007fa:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80007fc:	4aaa      	ldr	r2, [pc, #680]	; (8000aa8 <HAL_RCC_OscConfig+0x328>)
 80007fe:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000800:	f7ff fe2c 	bl	800045c <HAL_InitTick>
        if(status != HAL_OK)
 8000804:	2800      	cmp	r0, #0
 8000806:	d1c1      	bne.n	800078c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000808:	682b      	ldr	r3, [r5, #0]
 800080a:	071b      	lsls	r3, r3, #28
 800080c:	d500      	bpl.n	8000810 <HAL_RCC_OscConfig+0x90>
 800080e:	e0ee      	b.n	80009ee <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000810:	682b      	ldr	r3, [r5, #0]
 8000812:	075b      	lsls	r3, r3, #29
 8000814:	d500      	bpl.n	8000818 <HAL_RCC_OscConfig+0x98>
 8000816:	e110      	b.n	8000a3a <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	069b      	lsls	r3, r3, #26
 800081c:	d500      	bpl.n	8000820 <HAL_RCC_OscConfig+0xa0>
 800081e:	e195      	b.n	8000b4c <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000820:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000822:	2b00      	cmp	r3, #0
 8000824:	d000      	beq.n	8000828 <HAL_RCC_OscConfig+0xa8>
 8000826:	e1c4      	b.n	8000bb2 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8000828:	2000      	movs	r0, #0
 800082a:	e7af      	b.n	800078c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800082c:	2e08      	cmp	r6, #8
 800082e:	d004      	beq.n	800083a <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000830:	2e0c      	cmp	r6, #12
 8000832:	d109      	bne.n	8000848 <HAL_RCC_OscConfig+0xc8>
 8000834:	9a01      	ldr	r2, [sp, #4]
 8000836:	2a00      	cmp	r2, #0
 8000838:	d006      	beq.n	8000848 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	039b      	lsls	r3, r3, #14
 800083e:	d5b3      	bpl.n	80007a8 <HAL_RCC_OscConfig+0x28>
 8000840:	686b      	ldr	r3, [r5, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1b0      	bne.n	80007a8 <HAL_RCC_OscConfig+0x28>
 8000846:	e7a0      	b.n	800078a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000848:	686a      	ldr	r2, [r5, #4]
 800084a:	429a      	cmp	r2, r3
 800084c:	d111      	bne.n	8000872 <HAL_RCC_OscConfig+0xf2>
 800084e:	6822      	ldr	r2, [r4, #0]
 8000850:	4313      	orrs	r3, r2
 8000852:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000854:	f7ff fe46 	bl	80004e4 <HAL_GetTick>
 8000858:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	0292      	lsls	r2, r2, #10
 8000860:	4213      	tst	r3, r2
 8000862:	d1a1      	bne.n	80007a8 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000864:	f7ff fe3e 	bl	80004e4 <HAL_GetTick>
 8000868:	1bc0      	subs	r0, r0, r7
 800086a:	2864      	cmp	r0, #100	; 0x64
 800086c:	d9f5      	bls.n	800085a <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 800086e:	2003      	movs	r0, #3
 8000870:	e78c      	b.n	800078c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000872:	21a0      	movs	r1, #160	; 0xa0
 8000874:	02c9      	lsls	r1, r1, #11
 8000876:	428a      	cmp	r2, r1
 8000878:	d105      	bne.n	8000886 <HAL_RCC_OscConfig+0x106>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	6821      	ldr	r1, [r4, #0]
 800087e:	02d2      	lsls	r2, r2, #11
 8000880:	430a      	orrs	r2, r1
 8000882:	6022      	str	r2, [r4, #0]
 8000884:	e7e3      	b.n	800084e <HAL_RCC_OscConfig+0xce>
 8000886:	6821      	ldr	r1, [r4, #0]
 8000888:	4888      	ldr	r0, [pc, #544]	; (8000aac <HAL_RCC_OscConfig+0x32c>)
 800088a:	4001      	ands	r1, r0
 800088c:	6021      	str	r1, [r4, #0]
 800088e:	6821      	ldr	r1, [r4, #0]
 8000890:	400b      	ands	r3, r1
 8000892:	9305      	str	r3, [sp, #20]
 8000894:	9b05      	ldr	r3, [sp, #20]
 8000896:	4986      	ldr	r1, [pc, #536]	; (8000ab0 <HAL_RCC_OscConfig+0x330>)
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	400b      	ands	r3, r1
 800089c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800089e:	2a00      	cmp	r2, #0
 80008a0:	d1d8      	bne.n	8000854 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 80008a2:	f7ff fe1f 	bl	80004e4 <HAL_GetTick>
 80008a6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	0292      	lsls	r2, r2, #10
 80008ae:	4213      	tst	r3, r2
 80008b0:	d100      	bne.n	80008b4 <HAL_RCC_OscConfig+0x134>
 80008b2:	e779      	b.n	80007a8 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b4:	f7ff fe16 	bl	80004e4 <HAL_GetTick>
 80008b8:	1bc0      	subs	r0, r0, r7
 80008ba:	2864      	cmp	r0, #100	; 0x64
 80008bc:	d9f4      	bls.n	80008a8 <HAL_RCC_OscConfig+0x128>
 80008be:	e7d6      	b.n	800086e <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80008c0:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80008c2:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80008c4:	4213      	tst	r3, r2
 80008c6:	d003      	beq.n	80008d0 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80008c8:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80008ca:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80008cc:	4311      	orrs	r1, r2
 80008ce:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008d0:	2e04      	cmp	r6, #4
 80008d2:	d004      	beq.n	80008de <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80008d4:	2e0c      	cmp	r6, #12
 80008d6:	d125      	bne.n	8000924 <HAL_RCC_OscConfig+0x1a4>
 80008d8:	9a01      	ldr	r2, [sp, #4]
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d122      	bne.n	8000924 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80008de:	6822      	ldr	r2, [r4, #0]
 80008e0:	0752      	lsls	r2, r2, #29
 80008e2:	d502      	bpl.n	80008ea <HAL_RCC_OscConfig+0x16a>
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d100      	bne.n	80008ea <HAL_RCC_OscConfig+0x16a>
 80008e8:	e74f      	b.n	800078a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ea:	6861      	ldr	r1, [r4, #4]
 80008ec:	692a      	ldr	r2, [r5, #16]
 80008ee:	4871      	ldr	r0, [pc, #452]	; (8000ab4 <HAL_RCC_OscConfig+0x334>)
 80008f0:	0212      	lsls	r2, r2, #8
 80008f2:	4001      	ands	r1, r0
 80008f4:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008f6:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008f8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008fa:	6822      	ldr	r2, [r4, #0]
 80008fc:	438a      	bics	r2, r1
 80008fe:	4313      	orrs	r3, r2
 8000900:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000902:	f7ff ff01 	bl	8000708 <HAL_RCC_GetSysClockFreq>
 8000906:	68e3      	ldr	r3, [r4, #12]
 8000908:	4a66      	ldr	r2, [pc, #408]	; (8000aa4 <HAL_RCC_OscConfig+0x324>)
 800090a:	061b      	lsls	r3, r3, #24
 800090c:	0f1b      	lsrs	r3, r3, #28
 800090e:	5cd3      	ldrb	r3, [r2, r3]
 8000910:	40d8      	lsrs	r0, r3
 8000912:	4b65      	ldr	r3, [pc, #404]	; (8000aa8 <HAL_RCC_OscConfig+0x328>)
 8000914:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff fda0 	bl	800045c <HAL_InitTick>
      if(status != HAL_OK)
 800091c:	2800      	cmp	r0, #0
 800091e:	d100      	bne.n	8000922 <HAL_RCC_OscConfig+0x1a2>
 8000920:	e746      	b.n	80007b0 <HAL_RCC_OscConfig+0x30>
 8000922:	e733      	b.n	800078c <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8000924:	2b00      	cmp	r3, #0
 8000926:	d019      	beq.n	800095c <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000928:	2109      	movs	r1, #9
 800092a:	6822      	ldr	r2, [r4, #0]
 800092c:	438a      	bics	r2, r1
 800092e:	4313      	orrs	r3, r2
 8000930:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000932:	f7ff fdd7 	bl	80004e4 <HAL_GetTick>
 8000936:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000938:	2204      	movs	r2, #4
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	4213      	tst	r3, r2
 800093e:	d007      	beq.n	8000950 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000940:	6862      	ldr	r2, [r4, #4]
 8000942:	692b      	ldr	r3, [r5, #16]
 8000944:	495b      	ldr	r1, [pc, #364]	; (8000ab4 <HAL_RCC_OscConfig+0x334>)
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	400a      	ands	r2, r1
 800094a:	4313      	orrs	r3, r2
 800094c:	6063      	str	r3, [r4, #4]
 800094e:	e72f      	b.n	80007b0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000950:	f7ff fdc8 	bl	80004e4 <HAL_GetTick>
 8000954:	1bc0      	subs	r0, r0, r7
 8000956:	2802      	cmp	r0, #2
 8000958:	d9ee      	bls.n	8000938 <HAL_RCC_OscConfig+0x1b8>
 800095a:	e788      	b.n	800086e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 800095c:	2201      	movs	r2, #1
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	4393      	bics	r3, r2
 8000962:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000964:	f7ff fdbe 	bl	80004e4 <HAL_GetTick>
 8000968:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800096a:	2204      	movs	r2, #4
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	4213      	tst	r3, r2
 8000970:	d100      	bne.n	8000974 <HAL_RCC_OscConfig+0x1f4>
 8000972:	e71d      	b.n	80007b0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000974:	f7ff fdb6 	bl	80004e4 <HAL_GetTick>
 8000978:	1bc0      	subs	r0, r0, r7
 800097a:	2802      	cmp	r0, #2
 800097c:	d9f5      	bls.n	800096a <HAL_RCC_OscConfig+0x1ea>
 800097e:	e776      	b.n	800086e <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000980:	69eb      	ldr	r3, [r5, #28]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d020      	beq.n	80009c8 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	6822      	ldr	r2, [r4, #0]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4313      	orrs	r3, r2
 800098e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000990:	f7ff fda8 	bl	80004e4 <HAL_GetTick>
 8000994:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	4213      	tst	r3, r2
 800099e:	d00d      	beq.n	80009bc <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009a0:	6863      	ldr	r3, [r4, #4]
 80009a2:	4a3f      	ldr	r2, [pc, #252]	; (8000aa0 <HAL_RCC_OscConfig+0x320>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80009a8:	4313      	orrs	r3, r2
 80009aa:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009ac:	6862      	ldr	r2, [r4, #4]
 80009ae:	6a2b      	ldr	r3, [r5, #32]
 80009b0:	0212      	lsls	r2, r2, #8
 80009b2:	061b      	lsls	r3, r3, #24
 80009b4:	0a12      	lsrs	r2, r2, #8
 80009b6:	4313      	orrs	r3, r2
 80009b8:	6063      	str	r3, [r4, #4]
 80009ba:	e725      	b.n	8000808 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009bc:	f7ff fd92 	bl	80004e4 <HAL_GetTick>
 80009c0:	1bc0      	subs	r0, r0, r7
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9e7      	bls.n	8000996 <HAL_RCC_OscConfig+0x216>
 80009c6:	e752      	b.n	800086e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	4a3b      	ldr	r2, [pc, #236]	; (8000ab8 <HAL_RCC_OscConfig+0x338>)
 80009cc:	4013      	ands	r3, r2
 80009ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009d0:	f7ff fd88 	bl	80004e4 <HAL_GetTick>
 80009d4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	4213      	tst	r3, r2
 80009de:	d100      	bne.n	80009e2 <HAL_RCC_OscConfig+0x262>
 80009e0:	e712      	b.n	8000808 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009e2:	f7ff fd7f 	bl	80004e4 <HAL_GetTick>
 80009e6:	1bc0      	subs	r0, r0, r7
 80009e8:	2802      	cmp	r0, #2
 80009ea:	d9f4      	bls.n	80009d6 <HAL_RCC_OscConfig+0x256>
 80009ec:	e73f      	b.n	800086e <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009ee:	696a      	ldr	r2, [r5, #20]
 80009f0:	2301      	movs	r3, #1
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	d010      	beq.n	8000a18 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80009f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80009f8:	4313      	orrs	r3, r2
 80009fa:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009fc:	f7ff fd72 	bl	80004e4 <HAL_GetTick>
 8000a00:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a02:	2202      	movs	r2, #2
 8000a04:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a06:	4213      	tst	r3, r2
 8000a08:	d000      	beq.n	8000a0c <HAL_RCC_OscConfig+0x28c>
 8000a0a:	e701      	b.n	8000810 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a0c:	f7ff fd6a 	bl	80004e4 <HAL_GetTick>
 8000a10:	1bc0      	subs	r0, r0, r7
 8000a12:	2802      	cmp	r0, #2
 8000a14:	d9f5      	bls.n	8000a02 <HAL_RCC_OscConfig+0x282>
 8000a16:	e72a      	b.n	800086e <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000a18:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a1a:	439a      	bics	r2, r3
 8000a1c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a1e:	f7ff fd61 	bl	80004e4 <HAL_GetTick>
 8000a22:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000a24:	2202      	movs	r2, #2
 8000a26:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a28:	4213      	tst	r3, r2
 8000a2a:	d100      	bne.n	8000a2e <HAL_RCC_OscConfig+0x2ae>
 8000a2c:	e6f0      	b.n	8000810 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a2e:	f7ff fd59 	bl	80004e4 <HAL_GetTick>
 8000a32:	1bc0      	subs	r0, r0, r7
 8000a34:	2802      	cmp	r0, #2
 8000a36:	d9f5      	bls.n	8000a24 <HAL_RCC_OscConfig+0x2a4>
 8000a38:	e719      	b.n	800086e <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a3c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a40:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000a42:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a44:	421a      	tst	r2, r3
 8000a46:	d104      	bne.n	8000a52 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	4f19      	ldr	r7, [pc, #100]	; (8000abc <HAL_RCC_OscConfig+0x33c>)
 8000a56:	0052      	lsls	r2, r2, #1
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	4213      	tst	r3, r2
 8000a5c:	d008      	beq.n	8000a70 <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	68ab      	ldr	r3, [r5, #8]
 8000a62:	0052      	lsls	r2, r2, #1
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d12b      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x340>
 8000a68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8000a6e:	e04c      	b.n	8000b0a <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	0052      	lsls	r2, r2, #1
 8000a76:	4313      	orrs	r3, r2
 8000a78:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000a7a:	f7ff fd33 	bl	80004e4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000a82:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a84:	9303      	str	r3, [sp, #12]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	9a03      	ldr	r2, [sp, #12]
 8000a8a:	4213      	tst	r3, r2
 8000a8c:	d1e7      	bne.n	8000a5e <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a8e:	f7ff fd29 	bl	80004e4 <HAL_GetTick>
 8000a92:	9b02      	ldr	r3, [sp, #8]
 8000a94:	1ac0      	subs	r0, r0, r3
 8000a96:	2864      	cmp	r0, #100	; 0x64
 8000a98:	d9f5      	bls.n	8000a86 <HAL_RCC_OscConfig+0x306>
 8000a9a:	e6e8      	b.n	800086e <HAL_RCC_OscConfig+0xee>
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	ffff1fff 	.word	0xffff1fff
 8000aa4:	080016fd 	.word	0x080016fd
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	fffeffff 	.word	0xfffeffff
 8000ab0:	fffbffff 	.word	0xfffbffff
 8000ab4:	ffffe0ff 	.word	0xffffe0ff
 8000ab8:	fffffeff 	.word	0xfffffeff
 8000abc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d116      	bne.n	8000af2 <HAL_RCC_OscConfig+0x372>
 8000ac4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ac6:	4a6c      	ldr	r2, [pc, #432]	; (8000c78 <HAL_RCC_OscConfig+0x4f8>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	6523      	str	r3, [r4, #80]	; 0x50
 8000acc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ace:	4a6b      	ldr	r2, [pc, #428]	; (8000c7c <HAL_RCC_OscConfig+0x4fc>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fd06 	bl	80004e4 <HAL_GetTick>
 8000ad8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ade:	0092      	lsls	r2, r2, #2
 8000ae0:	4213      	tst	r3, r2
 8000ae2:	d02a      	beq.n	8000b3a <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae4:	f7ff fcfe 	bl	80004e4 <HAL_GetTick>
 8000ae8:	4b65      	ldr	r3, [pc, #404]	; (8000c80 <HAL_RCC_OscConfig+0x500>)
 8000aea:	1bc0      	subs	r0, r0, r7
 8000aec:	4298      	cmp	r0, r3
 8000aee:	d9f4      	bls.n	8000ada <HAL_RCC_OscConfig+0x35a>
 8000af0:	e6bd      	b.n	800086e <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af2:	21a0      	movs	r1, #160	; 0xa0
 8000af4:	00c9      	lsls	r1, r1, #3
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d10b      	bne.n	8000b12 <HAL_RCC_OscConfig+0x392>
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	430b      	orrs	r3, r1
 8000b02:	6523      	str	r3, [r4, #80]	; 0x50
 8000b04:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b06:	431a      	orrs	r2, r3
 8000b08:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b0a:	f7ff fceb 	bl	80004e4 <HAL_GetTick>
 8000b0e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b10:	e00e      	b.n	8000b30 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b12:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b14:	4a58      	ldr	r2, [pc, #352]	; (8000c78 <HAL_RCC_OscConfig+0x4f8>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	6523      	str	r3, [r4, #80]	; 0x50
 8000b1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b1c:	4a57      	ldr	r2, [pc, #348]	; (8000c7c <HAL_RCC_OscConfig+0x4fc>)
 8000b1e:	4013      	ands	r3, r2
 8000b20:	e7a4      	b.n	8000a6c <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f7ff fcdf 	bl	80004e4 <HAL_GetTick>
 8000b26:	4b56      	ldr	r3, [pc, #344]	; (8000c80 <HAL_RCC_OscConfig+0x500>)
 8000b28:	1bc0      	subs	r0, r0, r7
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	d900      	bls.n	8000b30 <HAL_RCC_OscConfig+0x3b0>
 8000b2e:	e69e      	b.n	800086e <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	4213      	tst	r3, r2
 8000b38:	d0f3      	beq.n	8000b22 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000b3a:	9b01      	ldr	r3, [sp, #4]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d000      	beq.n	8000b42 <HAL_RCC_OscConfig+0x3c2>
 8000b40:	e66a      	b.n	8000818 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b44:	4a4f      	ldr	r2, [pc, #316]	; (8000c84 <HAL_RCC_OscConfig+0x504>)
 8000b46:	4013      	ands	r3, r2
 8000b48:	63a3      	str	r3, [r4, #56]	; 0x38
 8000b4a:	e665      	b.n	8000818 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b4c:	69a9      	ldr	r1, [r5, #24]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4a4d      	ldr	r2, [pc, #308]	; (8000c88 <HAL_RCC_OscConfig+0x508>)
 8000b52:	2900      	cmp	r1, #0
 8000b54:	d018      	beq.n	8000b88 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 8000b56:	68a1      	ldr	r1, [r4, #8]
 8000b58:	4319      	orrs	r1, r3
 8000b5a:	60a1      	str	r1, [r4, #8]
 8000b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	6363      	str	r3, [r4, #52]	; 0x34
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	6a11      	ldr	r1, [r2, #32]
 8000b66:	019b      	lsls	r3, r3, #6
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fcba 	bl	80004e4 <HAL_GetTick>
 8000b70:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000b72:	2202      	movs	r2, #2
 8000b74:	68a3      	ldr	r3, [r4, #8]
 8000b76:	4213      	tst	r3, r2
 8000b78:	d000      	beq.n	8000b7c <HAL_RCC_OscConfig+0x3fc>
 8000b7a:	e651      	b.n	8000820 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b7c:	f7ff fcb2 	bl	80004e4 <HAL_GetTick>
 8000b80:	1bc0      	subs	r0, r0, r7
 8000b82:	2802      	cmp	r0, #2
 8000b84:	d9f5      	bls.n	8000b72 <HAL_RCC_OscConfig+0x3f2>
 8000b86:	e672      	b.n	800086e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000b88:	68a1      	ldr	r1, [r4, #8]
 8000b8a:	4399      	bics	r1, r3
 8000b8c:	60a1      	str	r1, [r4, #8]
 8000b8e:	6a13      	ldr	r3, [r2, #32]
 8000b90:	493e      	ldr	r1, [pc, #248]	; (8000c8c <HAL_RCC_OscConfig+0x50c>)
 8000b92:	400b      	ands	r3, r1
 8000b94:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b96:	f7ff fca5 	bl	80004e4 <HAL_GetTick>
 8000b9a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	68a3      	ldr	r3, [r4, #8]
 8000ba0:	4213      	tst	r3, r2
 8000ba2:	d100      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x426>
 8000ba4:	e63c      	b.n	8000820 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ba6:	f7ff fc9d 	bl	80004e4 <HAL_GetTick>
 8000baa:	1bc0      	subs	r0, r0, r7
 8000bac:	2802      	cmp	r0, #2
 8000bae:	d9f5      	bls.n	8000b9c <HAL_RCC_OscConfig+0x41c>
 8000bb0:	e65d      	b.n	800086e <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bb2:	2e0c      	cmp	r6, #12
 8000bb4:	d043      	beq.n	8000c3e <HAL_RCC_OscConfig+0x4be>
 8000bb6:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d12e      	bne.n	8000c1a <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8000bbc:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000bbe:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fc8e 	bl	80004e4 <HAL_GetTick>
 8000bc8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000bca:	04b6      	lsls	r6, r6, #18
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	4233      	tst	r3, r6
 8000bd0:	d11d      	bne.n	8000c0e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bd2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000bd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000bd6:	68e2      	ldr	r2, [r4, #12]
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	492e      	ldr	r1, [pc, #184]	; (8000c94 <HAL_RCC_OscConfig+0x514>)
 8000bdc:	400a      	ands	r2, r1
 8000bde:	4313      	orrs	r3, r2
 8000be0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000be2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000be4:	4313      	orrs	r3, r2
 8000be6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	045b      	lsls	r3, r3, #17
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fc77 	bl	80004e4 <HAL_GetTick>
 8000bf6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000bf8:	04ad      	lsls	r5, r5, #18
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	422b      	tst	r3, r5
 8000bfe:	d000      	beq.n	8000c02 <HAL_RCC_OscConfig+0x482>
 8000c00:	e612      	b.n	8000828 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c02:	f7ff fc6f 	bl	80004e4 <HAL_GetTick>
 8000c06:	1b80      	subs	r0, r0, r6
 8000c08:	2802      	cmp	r0, #2
 8000c0a:	d9f6      	bls.n	8000bfa <HAL_RCC_OscConfig+0x47a>
 8000c0c:	e62f      	b.n	800086e <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c0e:	f7ff fc69 	bl	80004e4 <HAL_GetTick>
 8000c12:	1bc0      	subs	r0, r0, r7
 8000c14:	2802      	cmp	r0, #2
 8000c16:	d9d9      	bls.n	8000bcc <HAL_RCC_OscConfig+0x44c>
 8000c18:	e629      	b.n	800086e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000c1a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c1c:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000c1e:	4013      	ands	r3, r2
 8000c20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c22:	f7ff fc5f 	bl	80004e4 <HAL_GetTick>
 8000c26:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c28:	04ad      	lsls	r5, r5, #18
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	422b      	tst	r3, r5
 8000c2e:	d100      	bne.n	8000c32 <HAL_RCC_OscConfig+0x4b2>
 8000c30:	e5fa      	b.n	8000828 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c32:	f7ff fc57 	bl	80004e4 <HAL_GetTick>
 8000c36:	1b80      	subs	r0, r0, r6
 8000c38:	2802      	cmp	r0, #2
 8000c3a:	d9f6      	bls.n	8000c2a <HAL_RCC_OscConfig+0x4aa>
 8000c3c:	e617      	b.n	800086e <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8000c3e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d100      	bne.n	8000c46 <HAL_RCC_OscConfig+0x4c6>
 8000c44:	e5a2      	b.n	800078c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c46:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000c48:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c4a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000c4c:	0252      	lsls	r2, r2, #9
 8000c4e:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000c50:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c52:	428a      	cmp	r2, r1
 8000c54:	d000      	beq.n	8000c58 <HAL_RCC_OscConfig+0x4d8>
 8000c56:	e599      	b.n	800078c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c58:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c5a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c5c:	0392      	lsls	r2, r2, #14
 8000c5e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c60:	428a      	cmp	r2, r1
 8000c62:	d000      	beq.n	8000c66 <HAL_RCC_OscConfig+0x4e6>
 8000c64:	e592      	b.n	800078c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000c66:	20c0      	movs	r0, #192	; 0xc0
 8000c68:	0400      	lsls	r0, r0, #16
 8000c6a:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c6c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000c6e:	1a18      	subs	r0, r3, r0
 8000c70:	1e43      	subs	r3, r0, #1
 8000c72:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000c74:	b2c0      	uxtb	r0, r0
 8000c76:	e589      	b.n	800078c <HAL_RCC_OscConfig+0xc>
 8000c78:	fffffeff 	.word	0xfffffeff
 8000c7c:	fffffbff 	.word	0xfffffbff
 8000c80:	00001388 	.word	0x00001388
 8000c84:	efffffff 	.word	0xefffffff
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	ffffdfff 	.word	0xffffdfff
 8000c90:	feffffff 	.word	0xfeffffff
 8000c94:	ff02ffff 	.word	0xff02ffff

08000c98 <HAL_RCC_ClockConfig>:
{
 8000c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c9a:	1e06      	subs	r6, r0, #0
 8000c9c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000c9e:	d101      	bne.n	8000ca4 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000ca0:	2001      	movs	r0, #1
}
 8000ca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4c51      	ldr	r4, [pc, #324]	; (8000dec <HAL_RCC_ClockConfig+0x154>)
 8000ca8:	9901      	ldr	r1, [sp, #4]
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	4013      	ands	r3, r2
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d327      	bcc.n	8000d02 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cb2:	6832      	ldr	r2, [r6, #0]
 8000cb4:	0793      	lsls	r3, r2, #30
 8000cb6:	d42f      	bmi.n	8000d18 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cb8:	07d3      	lsls	r3, r2, #31
 8000cba:	d435      	bmi.n	8000d28 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	9901      	ldr	r1, [sp, #4]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	4291      	cmp	r1, r2
 8000cc6:	d200      	bcs.n	8000cca <HAL_RCC_ClockConfig+0x32>
 8000cc8:	e081      	b.n	8000dce <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cca:	6832      	ldr	r2, [r6, #0]
 8000ccc:	4c48      	ldr	r4, [pc, #288]	; (8000df0 <HAL_RCC_ClockConfig+0x158>)
 8000cce:	0753      	lsls	r3, r2, #29
 8000cd0:	d500      	bpl.n	8000cd4 <HAL_RCC_ClockConfig+0x3c>
 8000cd2:	e084      	b.n	8000dde <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd4:	0713      	lsls	r3, r2, #28
 8000cd6:	d506      	bpl.n	8000ce6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cd8:	68e2      	ldr	r2, [r4, #12]
 8000cda:	6933      	ldr	r3, [r6, #16]
 8000cdc:	4945      	ldr	r1, [pc, #276]	; (8000df4 <HAL_RCC_ClockConfig+0x15c>)
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ce6:	f7ff fd0f 	bl	8000708 <HAL_RCC_GetSysClockFreq>
 8000cea:	68e3      	ldr	r3, [r4, #12]
 8000cec:	4a42      	ldr	r2, [pc, #264]	; (8000df8 <HAL_RCC_ClockConfig+0x160>)
 8000cee:	061b      	lsls	r3, r3, #24
 8000cf0:	0f1b      	lsrs	r3, r3, #28
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	40d8      	lsrs	r0, r3
 8000cf6:	4b41      	ldr	r3, [pc, #260]	; (8000dfc <HAL_RCC_ClockConfig+0x164>)
 8000cf8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fbae 	bl	800045c <HAL_InitTick>
 8000d00:	e7cf      	b.n	8000ca2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	9901      	ldr	r1, [sp, #4]
 8000d06:	4393      	bics	r3, r2
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	9a01      	ldr	r2, [sp, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d1c4      	bne.n	8000ca0 <HAL_RCC_ClockConfig+0x8>
 8000d16:	e7cc      	b.n	8000cb2 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d18:	20f0      	movs	r0, #240	; 0xf0
 8000d1a:	4935      	ldr	r1, [pc, #212]	; (8000df0 <HAL_RCC_ClockConfig+0x158>)
 8000d1c:	68cb      	ldr	r3, [r1, #12]
 8000d1e:	4383      	bics	r3, r0
 8000d20:	68b0      	ldr	r0, [r6, #8]
 8000d22:	4303      	orrs	r3, r0
 8000d24:	60cb      	str	r3, [r1, #12]
 8000d26:	e7c7      	b.n	8000cb8 <HAL_RCC_ClockConfig+0x20>
 8000d28:	4d31      	ldr	r5, [pc, #196]	; (8000df0 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d2a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d2c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d2e:	2a02      	cmp	r2, #2
 8000d30:	d119      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d32:	039b      	lsls	r3, r3, #14
 8000d34:	d5b4      	bpl.n	8000ca0 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d36:	2103      	movs	r1, #3
 8000d38:	68eb      	ldr	r3, [r5, #12]
 8000d3a:	438b      	bics	r3, r1
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000d40:	f7ff fbd0 	bl	80004e4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d44:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d46:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d119      	bne.n	8000d80 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d4c:	220c      	movs	r2, #12
 8000d4e:	68eb      	ldr	r3, [r5, #12]
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d0b2      	beq.n	8000cbc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d56:	f7ff fbc5 	bl	80004e4 <HAL_GetTick>
 8000d5a:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <HAL_RCC_ClockConfig+0x168>)
 8000d5c:	1bc0      	subs	r0, r0, r7
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d9f4      	bls.n	8000d4c <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000d62:	2003      	movs	r0, #3
 8000d64:	e79d      	b.n	8000ca2 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d66:	2a03      	cmp	r2, #3
 8000d68:	d102      	bne.n	8000d70 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000d6a:	019b      	lsls	r3, r3, #6
 8000d6c:	d4e3      	bmi.n	8000d36 <HAL_RCC_ClockConfig+0x9e>
 8000d6e:	e797      	b.n	8000ca0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d70:	2a01      	cmp	r2, #1
 8000d72:	d102      	bne.n	8000d7a <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d74:	075b      	lsls	r3, r3, #29
 8000d76:	d4de      	bmi.n	8000d36 <HAL_RCC_ClockConfig+0x9e>
 8000d78:	e792      	b.n	8000ca0 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000d7a:	059b      	lsls	r3, r3, #22
 8000d7c:	d4db      	bmi.n	8000d36 <HAL_RCC_ClockConfig+0x9e>
 8000d7e:	e78f      	b.n	8000ca0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d10b      	bne.n	8000d9c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d84:	220c      	movs	r2, #12
 8000d86:	68eb      	ldr	r3, [r5, #12]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d096      	beq.n	8000cbc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d8e:	f7ff fba9 	bl	80004e4 <HAL_GetTick>
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_RCC_ClockConfig+0x168>)
 8000d94:	1bc0      	subs	r0, r0, r7
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d9f4      	bls.n	8000d84 <HAL_RCC_ClockConfig+0xec>
 8000d9a:	e7e2      	b.n	8000d62 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d010      	beq.n	8000dc2 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000da0:	220c      	movs	r2, #12
 8000da2:	68eb      	ldr	r3, [r5, #12]
 8000da4:	4213      	tst	r3, r2
 8000da6:	d089      	beq.n	8000cbc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da8:	f7ff fb9c 	bl	80004e4 <HAL_GetTick>
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_RCC_ClockConfig+0x168>)
 8000dae:	1bc0      	subs	r0, r0, r7
 8000db0:	4298      	cmp	r0, r3
 8000db2:	d9f5      	bls.n	8000da0 <HAL_RCC_ClockConfig+0x108>
 8000db4:	e7d5      	b.n	8000d62 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db6:	f7ff fb95 	bl	80004e4 <HAL_GetTick>
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_RCC_ClockConfig+0x168>)
 8000dbc:	1bc0      	subs	r0, r0, r7
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d8cf      	bhi.n	8000d62 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	68eb      	ldr	r3, [r5, #12]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d1f4      	bne.n	8000db6 <HAL_RCC_ClockConfig+0x11e>
 8000dcc:	e776      	b.n	8000cbc <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dce:	6822      	ldr	r2, [r4, #0]
 8000dd0:	439a      	bics	r2, r3
 8000dd2:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dd4:	6822      	ldr	r2, [r4, #0]
 8000dd6:	421a      	tst	r2, r3
 8000dd8:	d000      	beq.n	8000ddc <HAL_RCC_ClockConfig+0x144>
 8000dda:	e761      	b.n	8000ca0 <HAL_RCC_ClockConfig+0x8>
 8000ddc:	e775      	b.n	8000cca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dde:	68e3      	ldr	r3, [r4, #12]
 8000de0:	4908      	ldr	r1, [pc, #32]	; (8000e04 <HAL_RCC_ClockConfig+0x16c>)
 8000de2:	400b      	ands	r3, r1
 8000de4:	68f1      	ldr	r1, [r6, #12]
 8000de6:	430b      	orrs	r3, r1
 8000de8:	60e3      	str	r3, [r4, #12]
 8000dea:	e773      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x3c>
 8000dec:	40022000 	.word	0x40022000
 8000df0:	40021000 	.word	0x40021000
 8000df4:	ffffc7ff 	.word	0xffffc7ff
 8000df8:	080016fd 	.word	0x080016fd
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	00001388 	.word	0x00001388
 8000e04:	fffff8ff 	.word	0xfffff8ff

08000e08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	055b      	lsls	r3, r3, #21
 8000e10:	0f5b      	lsrs	r3, r3, #29
 8000e12:	5cd3      	ldrb	r3, [r2, r3]
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e16:	6810      	ldr	r0, [r2, #0]
 8000e18:	40d8      	lsrs	r0, r3
}
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	0800170d 	.word	0x0800170d
 8000e24:	20000008 	.word	0x20000008

08000e28 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	049b      	lsls	r3, r3, #18
 8000e30:	0f5b      	lsrs	r3, r3, #29
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e36:	6810      	ldr	r0, [r2, #0]
 8000e38:	40d8      	lsrs	r0, r3
}
 8000e3a:	4770      	bx	lr
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	0800170d 	.word	0x0800170d
 8000e44:	20000008 	.word	0x20000008

08000e48 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e48:	2382      	movs	r3, #130	; 0x82
{
 8000e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000e4c:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e4e:	011b      	lsls	r3, r3, #4
{
 8000e50:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000e52:	421a      	tst	r2, r3
 8000e54:	d048      	beq.n	8000ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e56:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e58:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5a:	4c65      	ldr	r4, [pc, #404]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000e5c:	055b      	lsls	r3, r3, #21
 8000e5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000e60:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e62:	421a      	tst	r2, r3
 8000e64:	d104      	bne.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e70:	2780      	movs	r7, #128	; 0x80
 8000e72:	4e60      	ldr	r6, [pc, #384]	; (8000ff4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8000e74:	007f      	lsls	r7, r7, #1
 8000e76:	6833      	ldr	r3, [r6, #0]
 8000e78:	423b      	tst	r3, r7
 8000e7a:	d077      	beq.n	8000f6c <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000e7c:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000e7e:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000e80:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	0392      	lsls	r2, r2, #14
 8000e86:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000e88:	4010      	ands	r0, r2
 8000e8a:	4283      	cmp	r3, r0
 8000e8c:	d103      	bne.n	8000e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8000e8e:	68a8      	ldr	r0, [r5, #8]
 8000e90:	4002      	ands	r2, r0
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d009      	beq.n	8000eaa <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8000e96:	23c0      	movs	r3, #192	; 0xc0
 8000e98:	000a      	movs	r2, r1
 8000e9a:	029b      	lsls	r3, r3, #10
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d103      	bne.n	8000eaa <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000ea2:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000ea6:	039b      	lsls	r3, r3, #14
 8000ea8:	d471      	bmi.n	8000f8e <HAL_RCCEx_PeriphCLKConfig+0x146>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000eaa:	22c0      	movs	r2, #192	; 0xc0
 8000eac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000eae:	0292      	lsls	r2, r2, #10
 8000eb0:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000eb2:	d000      	beq.n	8000eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8000eb4:	e06c      	b.n	8000f90 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000eb6:	6869      	ldr	r1, [r5, #4]
 8000eb8:	23c0      	movs	r3, #192	; 0xc0
 8000eba:	000a      	movs	r2, r1
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d107      	bne.n	8000ed4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	484c      	ldr	r0, [pc, #304]	; (8000ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8000ec8:	4003      	ands	r3, r0
 8000eca:	20c0      	movs	r0, #192	; 0xc0
 8000ecc:	0380      	lsls	r0, r0, #14
 8000ece:	4001      	ands	r1, r0
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	6023      	str	r3, [r4, #0]
 8000ed4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ed6:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ed8:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000eda:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d103      	bne.n	8000ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ee2:	4a46      	ldr	r2, [pc, #280]	; (8000ffc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	07da      	lsls	r2, r3, #31
 8000eec:	d506      	bpl.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	493f      	ldr	r1, [pc, #252]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000ef2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000ef4:	4382      	bics	r2, r0
 8000ef6:	68e8      	ldr	r0, [r5, #12]
 8000ef8:	4302      	orrs	r2, r0
 8000efa:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000efc:	079a      	lsls	r2, r3, #30
 8000efe:	d506      	bpl.n	8000f0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f00:	200c      	movs	r0, #12
 8000f02:	493b      	ldr	r1, [pc, #236]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f04:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f06:	4382      	bics	r2, r0
 8000f08:	6928      	ldr	r0, [r5, #16]
 8000f0a:	4302      	orrs	r2, r0
 8000f0c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000f0e:	075a      	lsls	r2, r3, #29
 8000f10:	d506      	bpl.n	8000f20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000f12:	4937      	ldr	r1, [pc, #220]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f14:	483a      	ldr	r0, [pc, #232]	; (8001000 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8000f16:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f18:	4002      	ands	r2, r0
 8000f1a:	6968      	ldr	r0, [r5, #20]
 8000f1c:	4302      	orrs	r2, r0
 8000f1e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f20:	071a      	lsls	r2, r3, #28
 8000f22:	d506      	bpl.n	8000f32 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f24:	4932      	ldr	r1, [pc, #200]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f26:	4837      	ldr	r0, [pc, #220]	; (8001004 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8000f28:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f2a:	4002      	ands	r2, r0
 8000f2c:	69a8      	ldr	r0, [r5, #24]
 8000f2e:	4302      	orrs	r2, r0
 8000f30:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000f32:	05da      	lsls	r2, r3, #23
 8000f34:	d506      	bpl.n	8000f44 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000f36:	492e      	ldr	r1, [pc, #184]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f38:	4833      	ldr	r0, [pc, #204]	; (8001008 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8000f3a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f3c:	4002      	ands	r2, r0
 8000f3e:	69e8      	ldr	r0, [r5, #28]
 8000f40:	4302      	orrs	r2, r0
 8000f42:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000f44:	065a      	lsls	r2, r3, #25
 8000f46:	d506      	bpl.n	8000f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000f48:	4929      	ldr	r1, [pc, #164]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f4a:	4830      	ldr	r0, [pc, #192]	; (800100c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8000f4c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f4e:	4002      	ands	r2, r0
 8000f50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000f52:	4302      	orrs	r2, r0
 8000f54:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000f56:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000f58:	061b      	lsls	r3, r3, #24
 8000f5a:	d518      	bpl.n	8000f8e <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000f5c:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f5e:	492c      	ldr	r1, [pc, #176]	; (8001010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8000f60:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000f62:	400b      	ands	r3, r1
 8000f64:	6a29      	ldr	r1, [r5, #32]
 8000f66:	430b      	orrs	r3, r1
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	e010      	b.n	8000f8e <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f6c:	6833      	ldr	r3, [r6, #0]
 8000f6e:	433b      	orrs	r3, r7
 8000f70:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f72:	f7ff fab7 	bl	80004e4 <HAL_GetTick>
 8000f76:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f78:	6833      	ldr	r3, [r6, #0]
 8000f7a:	423b      	tst	r3, r7
 8000f7c:	d000      	beq.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8000f7e:	e77d      	b.n	8000e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f80:	f7ff fab0 	bl	80004e4 <HAL_GetTick>
 8000f84:	9b01      	ldr	r3, [sp, #4]
 8000f86:	1ac0      	subs	r0, r0, r3
 8000f88:	2864      	cmp	r0, #100	; 0x64
 8000f8a:	d9f5      	bls.n	8000f78 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 8000f8c:	2003      	movs	r0, #3
}
 8000f8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000f90:	4011      	ands	r1, r2
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d002      	beq.n	8000f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f96:	6829      	ldr	r1, [r5, #0]
 8000f98:	0689      	lsls	r1, r1, #26
 8000f9a:	d408      	bmi.n	8000fae <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8000f9c:	68a9      	ldr	r1, [r5, #8]
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d100      	bne.n	8000fa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8000fa4:	e787      	b.n	8000eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8000fa6:	682b      	ldr	r3, [r5, #0]
 8000fa8:	051b      	lsls	r3, r3, #20
 8000faa:	d400      	bmi.n	8000fae <HAL_RCCEx_PeriphCLKConfig+0x166>
 8000fac:	e783      	b.n	8000eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fae:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fb0:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fb2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000fb4:	0312      	lsls	r2, r2, #12
 8000fb6:	4302      	orrs	r2, r0
 8000fb8:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fba:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fbe:	4815      	ldr	r0, [pc, #84]	; (8001014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fc0:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fc2:	4002      	ands	r2, r0
 8000fc4:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8000fc6:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8000fc8:	05cb      	lsls	r3, r1, #23
 8000fca:	d400      	bmi.n	8000fce <HAL_RCCEx_PeriphCLKConfig+0x186>
 8000fcc:	e773      	b.n	8000eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 8000fce:	f7ff fa89 	bl	80004e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fd2:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000fd4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fd6:	00bf      	lsls	r7, r7, #2
 8000fd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fda:	423b      	tst	r3, r7
 8000fdc:	d000      	beq.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8000fde:	e76a      	b.n	8000eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fa80 	bl	80004e4 <HAL_GetTick>
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8000fe6:	1b80      	subs	r0, r0, r6
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	d9f5      	bls.n	8000fd8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8000fec:	e7ce      	b.n	8000f8c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40007000 	.word	0x40007000
 8000ff8:	ffcfffff 	.word	0xffcfffff
 8000ffc:	efffffff 	.word	0xefffffff
 8001000:	fffff3ff 	.word	0xfffff3ff
 8001004:	ffffcfff 	.word	0xffffcfff
 8001008:	fffcffff 	.word	0xfffcffff
 800100c:	fbffffff 	.word	0xfbffffff
 8001010:	fff3ffff 	.word	0xfff3ffff
 8001014:	fff7ffff 	.word	0xfff7ffff
 8001018:	00001388 	.word	0x00001388

0800101c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001020:	6925      	ldr	r5, [r4, #16]
 8001022:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001024:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001026:	432a      	orrs	r2, r5
 8001028:	6965      	ldr	r5, [r4, #20]
 800102a:	69c1      	ldr	r1, [r0, #28]
 800102c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	4d81      	ldr	r5, [pc, #516]	; (8001238 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001032:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001034:	4028      	ands	r0, r5
 8001036:	4302      	orrs	r2, r0
 8001038:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	487f      	ldr	r0, [pc, #508]	; (800123c <UART_SetConfig+0x220>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800103e:	4d80      	ldr	r5, [pc, #512]	; (8001240 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001040:	4002      	ands	r2, r0
 8001042:	68e0      	ldr	r0, [r4, #12]
 8001044:	4302      	orrs	r2, r0
 8001046:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001048:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800104a:	42ab      	cmp	r3, r5
 800104c:	d001      	beq.n	8001052 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800104e:	6a22      	ldr	r2, [r4, #32]
 8001050:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	4e7b      	ldr	r6, [pc, #492]	; (8001244 <UART_SetConfig+0x228>)
 8001056:	4032      	ands	r2, r6
 8001058:	4302      	orrs	r2, r0
 800105a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800105c:	4a7a      	ldr	r2, [pc, #488]	; (8001248 <UART_SetConfig+0x22c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d113      	bne.n	800108a <UART_SetConfig+0x6e>
 8001062:	2203      	movs	r2, #3
 8001064:	4b79      	ldr	r3, [pc, #484]	; (800124c <UART_SetConfig+0x230>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	4013      	ands	r3, r2
 800106a:	4a79      	ldr	r2, [pc, #484]	; (8001250 <UART_SetConfig+0x234>)
 800106c:	5cd0      	ldrb	r0, [r2, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	4299      	cmp	r1, r3
 8001074:	d100      	bne.n	8001078 <UART_SetConfig+0x5c>
 8001076:	e0d1      	b.n	800121c <UART_SetConfig+0x200>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001078:	2808      	cmp	r0, #8
 800107a:	d826      	bhi.n	80010ca <UART_SetConfig+0xae>
 800107c:	f7ff f844 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001080:	259996c0 	.word	0x259996c0
 8001084:	252525b4 	.word	0x252525b4
 8001088:	b7          	.byte	0xb7
 8001089:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800108a:	4a72      	ldr	r2, [pc, #456]	; (8001254 <UART_SetConfig+0x238>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d105      	bne.n	800109c <UART_SetConfig+0x80>
 8001090:	220c      	movs	r2, #12
 8001092:	4b6e      	ldr	r3, [pc, #440]	; (800124c <UART_SetConfig+0x230>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4013      	ands	r3, r2
 8001098:	4a6f      	ldr	r2, [pc, #444]	; (8001258 <UART_SetConfig+0x23c>)
 800109a:	e7e7      	b.n	800106c <UART_SetConfig+0x50>
 800109c:	4a6f      	ldr	r2, [pc, #444]	; (800125c <UART_SetConfig+0x240>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d100      	bne.n	80010a4 <UART_SetConfig+0x88>
 80010a2:	e0a9      	b.n	80011f8 <UART_SetConfig+0x1dc>
 80010a4:	4a6e      	ldr	r2, [pc, #440]	; (8001260 <UART_SetConfig+0x244>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d100      	bne.n	80010ac <UART_SetConfig+0x90>
 80010aa:	e0a5      	b.n	80011f8 <UART_SetConfig+0x1dc>
 80010ac:	42ab      	cmp	r3, r5
 80010ae:	d000      	beq.n	80010b2 <UART_SetConfig+0x96>
 80010b0:	e0ad      	b.n	800120e <UART_SetConfig+0x1f2>
 80010b2:	21c0      	movs	r1, #192	; 0xc0
 80010b4:	2080      	movs	r0, #128	; 0x80
 80010b6:	4a65      	ldr	r2, [pc, #404]	; (800124c <UART_SetConfig+0x230>)
 80010b8:	0109      	lsls	r1, r1, #4
 80010ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80010bc:	00c0      	lsls	r0, r0, #3
 80010be:	400b      	ands	r3, r1
 80010c0:	4283      	cmp	r3, r0
 80010c2:	d038      	beq.n	8001136 <UART_SetConfig+0x11a>
 80010c4:	d803      	bhi.n	80010ce <UART_SetConfig+0xb2>
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00a      	beq.n	80010e0 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 80010ca:	2501      	movs	r5, #1
 80010cc:	e00d      	b.n	80010ea <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010ce:	2080      	movs	r0, #128	; 0x80
 80010d0:	0100      	lsls	r0, r0, #4
 80010d2:	4283      	cmp	r3, r0
 80010d4:	d00e      	beq.n	80010f4 <UART_SetConfig+0xd8>
 80010d6:	428b      	cmp	r3, r1
 80010d8:	d1f7      	bne.n	80010ca <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80010da:	2080      	movs	r0, #128	; 0x80
 80010dc:	0200      	lsls	r0, r0, #8
 80010de:	e00d      	b.n	80010fc <UART_SetConfig+0xe0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80010e0:	f7ff fe92 	bl	8000e08 <HAL_RCC_GetPCLK1Freq>
 80010e4:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 80010e6:	42a8      	cmp	r0, r5
 80010e8:	d108      	bne.n	80010fc <UART_SetConfig+0xe0>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80010ea:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 80010ec:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 80010ee:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80010f0:	6663      	str	r3, [r4, #100]	; 0x64
}
 80010f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80010f4:	6813      	ldr	r3, [r2, #0]
 80010f6:	06db      	lsls	r3, r3, #27
 80010f8:	d520      	bpl.n	800113c <UART_SetConfig+0x120>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80010fa:	485a      	ldr	r0, [pc, #360]	; (8001264 <UART_SetConfig+0x248>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80010fc:	2203      	movs	r2, #3
 80010fe:	6863      	ldr	r3, [r4, #4]
 8001100:	435a      	muls	r2, r3
 8001102:	4282      	cmp	r2, r0
 8001104:	d8e1      	bhi.n	80010ca <UART_SetConfig+0xae>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001106:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001108:	4282      	cmp	r2, r0
 800110a:	d3de      	bcc.n	80010ca <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800110c:	2700      	movs	r7, #0
 800110e:	0e02      	lsrs	r2, r0, #24
 8001110:	0201      	lsls	r1, r0, #8
 8001112:	085e      	lsrs	r6, r3, #1
 8001114:	1989      	adds	r1, r1, r6
 8001116:	417a      	adcs	r2, r7
 8001118:	0008      	movs	r0, r1
 800111a:	0011      	movs	r1, r2
 800111c:	001a      	movs	r2, r3
 800111e:	003b      	movs	r3, r7
 8001120:	f7ff f892 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001124:	4b50      	ldr	r3, [pc, #320]	; (8001268 <UART_SetConfig+0x24c>)
 8001126:	18c2      	adds	r2, r0, r3
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <UART_SetConfig+0x250>)
 800112a:	429a      	cmp	r2, r3
 800112c:	d8cd      	bhi.n	80010ca <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	003d      	movs	r5, r7
 8001132:	60d8      	str	r0, [r3, #12]
 8001134:	e7d9      	b.n	80010ea <UART_SetConfig+0xce>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001136:	f7ff fae7 	bl	8000708 <HAL_RCC_GetSysClockFreq>
        break;
 800113a:	e7d3      	b.n	80010e4 <UART_SetConfig+0xc8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800113c:	484c      	ldr	r0, [pc, #304]	; (8001270 <UART_SetConfig+0x254>)
 800113e:	e7dd      	b.n	80010fc <UART_SetConfig+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001140:	f7ff fe62 	bl	8000e08 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	0040      	lsls	r0, r0, #1
 8001148:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800114a:	18c0      	adds	r0, r0, r3
 800114c:	6861      	ldr	r1, [r4, #4]
 800114e:	e00b      	b.n	8001168 <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001150:	f7ff fe6a 	bl	8000e28 <HAL_RCC_GetPCLK2Freq>
 8001154:	e7f6      	b.n	8001144 <UART_SetConfig+0x128>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001156:	2510      	movs	r5, #16
 8001158:	4b3c      	ldr	r3, [pc, #240]	; (800124c <UART_SetConfig+0x230>)
 800115a:	6861      	ldr	r1, [r4, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800115e:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001160:	4015      	ands	r5, r2
 8001162:	d006      	beq.n	8001172 <UART_SetConfig+0x156>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001164:	4b43      	ldr	r3, [pc, #268]	; (8001274 <UART_SetConfig+0x258>)
 8001166:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001168:	f7fe ffe2 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800116c:	2500      	movs	r5, #0
 800116e:	b283      	uxth	r3, r0
        break;
 8001170:	e004      	b.n	800117c <UART_SetConfig+0x160>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001172:	4b41      	ldr	r3, [pc, #260]	; (8001278 <UART_SetConfig+0x25c>)
 8001174:	18c0      	adds	r0, r0, r3
 8001176:	f7fe ffdb 	bl	8000130 <__udivsi3>
 800117a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800117c:	0019      	movs	r1, r3
 800117e:	483f      	ldr	r0, [pc, #252]	; (800127c <UART_SetConfig+0x260>)
 8001180:	3910      	subs	r1, #16
 8001182:	4281      	cmp	r1, r0
 8001184:	d8a1      	bhi.n	80010ca <UART_SetConfig+0xae>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001186:	210f      	movs	r1, #15
 8001188:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800118a:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800118c:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800118e:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001190:	6821      	ldr	r1, [r4, #0]
 8001192:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8001194:	60cb      	str	r3, [r1, #12]
 8001196:	e7a8      	b.n	80010ea <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001198:	f7ff fab6 	bl	8000708 <HAL_RCC_GetSysClockFreq>
 800119c:	e7d2      	b.n	8001144 <UART_SetConfig+0x128>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800119e:	6863      	ldr	r3, [r4, #4]
 80011a0:	0858      	lsrs	r0, r3, #1
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	e7d0      	b.n	800114a <UART_SetConfig+0x12e>
  uint32_t usartdiv                   = 0x00000000U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	e7e7      	b.n	800117c <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80011ac:	f7ff fe3c 	bl	8000e28 <HAL_RCC_GetPCLK2Freq>
 80011b0:	e028      	b.n	8001204 <UART_SetConfig+0x1e8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80011b2:	2510      	movs	r5, #16
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <UART_SetConfig+0x230>)
 80011b6:	6861      	ldr	r1, [r4, #4]
 80011b8:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80011ba:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80011bc:	4015      	ands	r5, r2
 80011be:	d006      	beq.n	80011ce <UART_SetConfig+0x1b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <UART_SetConfig+0x248>)
 80011c2:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80011c4:	f7fe ffb4 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80011c8:	2500      	movs	r5, #0
 80011ca:	b283      	uxth	r3, r0
        break;
 80011cc:	e004      	b.n	80011d8 <UART_SetConfig+0x1bc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <UART_SetConfig+0x254>)
 80011d0:	18c0      	adds	r0, r0, r3
 80011d2:	f7fe ffad 	bl	8000130 <__udivsi3>
 80011d6:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80011d8:	0019      	movs	r1, r3
 80011da:	4828      	ldr	r0, [pc, #160]	; (800127c <UART_SetConfig+0x260>)
 80011dc:	3910      	subs	r1, #16
 80011de:	4281      	cmp	r1, r0
 80011e0:	d900      	bls.n	80011e4 <UART_SetConfig+0x1c8>
 80011e2:	e772      	b.n	80010ca <UART_SetConfig+0xae>
      huart->Instance->BRR = usartdiv;
 80011e4:	6821      	ldr	r1, [r4, #0]
 80011e6:	e7d5      	b.n	8001194 <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011e8:	f7ff fa8e 	bl	8000708 <HAL_RCC_GetSysClockFreq>
 80011ec:	e00a      	b.n	8001204 <UART_SetConfig+0x1e8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80011ee:	6863      	ldr	r3, [r4, #4]
 80011f0:	0858      	lsrs	r0, r3, #1
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	e007      	b.n	8001208 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	4299      	cmp	r1, r3
 80011fe:	d09f      	beq.n	8001140 <UART_SetConfig+0x124>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001200:	f7ff fe02 	bl	8000e08 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001204:	6863      	ldr	r3, [r4, #4]
 8001206:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001208:	18c0      	adds	r0, r0, r3
 800120a:	6861      	ldr	r1, [r4, #4]
 800120c:	e7da      	b.n	80011c4 <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800120e:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 8001210:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	4299      	cmp	r1, r3
 8001216:	d0c7      	beq.n	80011a8 <UART_SetConfig+0x18c>
  uint32_t usartdiv                   = 0x00000000U;
 8001218:	2300      	movs	r3, #0
 800121a:	e7dd      	b.n	80011d8 <UART_SetConfig+0x1bc>
    switch (clocksource)
 800121c:	2808      	cmp	r0, #8
 800121e:	d900      	bls.n	8001222 <UART_SetConfig+0x206>
 8001220:	e753      	b.n	80010ca <UART_SetConfig+0xae>
 8001222:	f7fe ff7b 	bl	800011c <__gnu_thumb1_case_shi>
 8001226:	ff8d      	.short	0xff8d
 8001228:	ff98ff95 	.word	0xff98ff95
 800122c:	ffb9ff52 	.word	0xffb9ff52
 8001230:	ff52ff52 	.word	0xff52ff52
 8001234:	ffbcff52 	.word	0xffbcff52
 8001238:	efff69f3 	.word	0xefff69f3
 800123c:	ffffcfff 	.word	0xffffcfff
 8001240:	40004800 	.word	0x40004800
 8001244:	fffff4ff 	.word	0xfffff4ff
 8001248:	40013800 	.word	0x40013800
 800124c:	40021000 	.word	0x40021000
 8001250:	080016ec 	.word	0x080016ec
 8001254:	40004400 	.word	0x40004400
 8001258:	080016f0 	.word	0x080016f0
 800125c:	40004c00 	.word	0x40004c00
 8001260:	40005000 	.word	0x40005000
 8001264:	003d0900 	.word	0x003d0900
 8001268:	fffffd00 	.word	0xfffffd00
 800126c:	000ffcff 	.word	0x000ffcff
 8001270:	00f42400 	.word	0x00f42400
 8001274:	007a1200 	.word	0x007a1200
 8001278:	01e84800 	.word	0x01e84800
 800127c:	0000ffef 	.word	0x0000ffef

08001280 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001280:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001282:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001284:	07da      	lsls	r2, r3, #31
 8001286:	d506      	bpl.n	8001296 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001288:	6801      	ldr	r1, [r0, #0]
 800128a:	4c28      	ldr	r4, [pc, #160]	; (800132c <UART_AdvFeatureConfig+0xac>)
 800128c:	684a      	ldr	r2, [r1, #4]
 800128e:	4022      	ands	r2, r4
 8001290:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001292:	4322      	orrs	r2, r4
 8001294:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001296:	079a      	lsls	r2, r3, #30
 8001298:	d506      	bpl.n	80012a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800129a:	6801      	ldr	r1, [r0, #0]
 800129c:	4c24      	ldr	r4, [pc, #144]	; (8001330 <UART_AdvFeatureConfig+0xb0>)
 800129e:	684a      	ldr	r2, [r1, #4]
 80012a0:	4022      	ands	r2, r4
 80012a2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80012a4:	4322      	orrs	r2, r4
 80012a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80012a8:	075a      	lsls	r2, r3, #29
 80012aa:	d506      	bpl.n	80012ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80012ac:	6801      	ldr	r1, [r0, #0]
 80012ae:	4c21      	ldr	r4, [pc, #132]	; (8001334 <UART_AdvFeatureConfig+0xb4>)
 80012b0:	684a      	ldr	r2, [r1, #4]
 80012b2:	4022      	ands	r2, r4
 80012b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80012b6:	4322      	orrs	r2, r4
 80012b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80012ba:	071a      	lsls	r2, r3, #28
 80012bc:	d506      	bpl.n	80012cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80012be:	6801      	ldr	r1, [r0, #0]
 80012c0:	4c1d      	ldr	r4, [pc, #116]	; (8001338 <UART_AdvFeatureConfig+0xb8>)
 80012c2:	684a      	ldr	r2, [r1, #4]
 80012c4:	4022      	ands	r2, r4
 80012c6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80012c8:	4322      	orrs	r2, r4
 80012ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80012cc:	06da      	lsls	r2, r3, #27
 80012ce:	d506      	bpl.n	80012de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80012d0:	6801      	ldr	r1, [r0, #0]
 80012d2:	4c1a      	ldr	r4, [pc, #104]	; (800133c <UART_AdvFeatureConfig+0xbc>)
 80012d4:	688a      	ldr	r2, [r1, #8]
 80012d6:	4022      	ands	r2, r4
 80012d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80012da:	4322      	orrs	r2, r4
 80012dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012de:	069a      	lsls	r2, r3, #26
 80012e0:	d506      	bpl.n	80012f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80012e2:	6801      	ldr	r1, [r0, #0]
 80012e4:	4c16      	ldr	r4, [pc, #88]	; (8001340 <UART_AdvFeatureConfig+0xc0>)
 80012e6:	688a      	ldr	r2, [r1, #8]
 80012e8:	4022      	ands	r2, r4
 80012ea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80012ec:	4322      	orrs	r2, r4
 80012ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80012f0:	065a      	lsls	r2, r3, #25
 80012f2:	d510      	bpl.n	8001316 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012f4:	6801      	ldr	r1, [r0, #0]
 80012f6:	4d13      	ldr	r5, [pc, #76]	; (8001344 <UART_AdvFeatureConfig+0xc4>)
 80012f8:	684a      	ldr	r2, [r1, #4]
 80012fa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80012fc:	402a      	ands	r2, r5
 80012fe:	4322      	orrs	r2, r4
 8001300:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	0352      	lsls	r2, r2, #13
 8001306:	4294      	cmp	r4, r2
 8001308:	d105      	bne.n	8001316 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800130a:	684a      	ldr	r2, [r1, #4]
 800130c:	4c0e      	ldr	r4, [pc, #56]	; (8001348 <UART_AdvFeatureConfig+0xc8>)
 800130e:	4022      	ands	r2, r4
 8001310:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001312:	4322      	orrs	r2, r4
 8001314:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001316:	061b      	lsls	r3, r3, #24
 8001318:	d506      	bpl.n	8001328 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800131a:	6802      	ldr	r2, [r0, #0]
 800131c:	490b      	ldr	r1, [pc, #44]	; (800134c <UART_AdvFeatureConfig+0xcc>)
 800131e:	6853      	ldr	r3, [r2, #4]
 8001320:	400b      	ands	r3, r1
 8001322:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001324:	430b      	orrs	r3, r1
 8001326:	6053      	str	r3, [r2, #4]
  }
}
 8001328:	bd30      	pop	{r4, r5, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	fffdffff 	.word	0xfffdffff
 8001330:	fffeffff 	.word	0xfffeffff
 8001334:	fffbffff 	.word	0xfffbffff
 8001338:	ffff7fff 	.word	0xffff7fff
 800133c:	ffffefff 	.word	0xffffefff
 8001340:	ffffdfff 	.word	0xffffdfff
 8001344:	ffefffff 	.word	0xffefffff
 8001348:	ff9fffff 	.word	0xff9fffff
 800134c:	fff7ffff 	.word	0xfff7ffff

08001350 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001352:	0004      	movs	r4, r0
 8001354:	000e      	movs	r6, r1
 8001356:	0015      	movs	r5, r2
 8001358:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	69d3      	ldr	r3, [r2, #28]
 800135e:	4033      	ands	r3, r6
 8001360:	1b9b      	subs	r3, r3, r6
 8001362:	4259      	negs	r1, r3
 8001364:	414b      	adcs	r3, r1
 8001366:	42ab      	cmp	r3, r5
 8001368:	d001      	beq.n	800136e <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800136a:	2000      	movs	r0, #0
 800136c:	e01b      	b.n	80013a6 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800136e:	9b06      	ldr	r3, [sp, #24]
 8001370:	3301      	adds	r3, #1
 8001372:	d0f3      	beq.n	800135c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001374:	f7ff f8b6 	bl	80004e4 <HAL_GetTick>
 8001378:	9b06      	ldr	r3, [sp, #24]
 800137a:	1bc0      	subs	r0, r0, r7
 800137c:	4283      	cmp	r3, r0
 800137e:	d301      	bcc.n	8001384 <UART_WaitOnFlagUntilTimeout+0x34>
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1ea      	bne.n	800135a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <UART_WaitOnFlagUntilTimeout+0x58>)
 8001388:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800138a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800138c:	400a      	ands	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	31a3      	adds	r1, #163	; 0xa3
 8001394:	31ff      	adds	r1, #255	; 0xff
 8001396:	438a      	bics	r2, r1
 8001398:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800139a:	2320      	movs	r3, #32
 800139c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800139e:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80013a0:	2300      	movs	r3, #0
 80013a2:	3470      	adds	r4, #112	; 0x70
 80013a4:	7023      	strb	r3, [r4, #0]
}
 80013a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a8:	fffffe5f 	.word	0xfffffe5f

080013ac <UART_CheckIdleState>:
{
 80013ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ae:	2600      	movs	r6, #0
{
 80013b0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b2:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80013b4:	f7ff f896 	bl	80004e4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80013b8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80013ba:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	071b      	lsls	r3, r3, #28
 80013c0:	d415      	bmi.n	80013ee <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	075b      	lsls	r3, r3, #29
 80013c8:	d50a      	bpl.n	80013e0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <UART_CheckIdleState+0x5c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	03c9      	lsls	r1, r1, #15
 80013d4:	002b      	movs	r3, r5
 80013d6:	0020      	movs	r0, r4
 80013d8:	f7ff ffba 	bl	8001350 <UART_WaitOnFlagUntilTimeout>
 80013dc:	2800      	cmp	r0, #0
 80013de:	d111      	bne.n	8001404 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80013e0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80013e2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80013e4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80013e6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80013e8:	3470      	adds	r4, #112	; 0x70
 80013ea:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80013ec:	e00b      	b.n	8001406 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <UART_CheckIdleState+0x5c>)
 80013f2:	0032      	movs	r2, r6
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	0389      	lsls	r1, r1, #14
 80013f8:	0003      	movs	r3, r0
 80013fa:	0020      	movs	r0, r4
 80013fc:	f7ff ffa8 	bl	8001350 <UART_WaitOnFlagUntilTimeout>
 8001400:	2800      	cmp	r0, #0
 8001402:	d0de      	beq.n	80013c2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001404:	2003      	movs	r0, #3
}
 8001406:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001408:	01ffffff 	.word	0x01ffffff

0800140c <HAL_UART_Init>:
{
 800140c:	b510      	push	{r4, lr}
 800140e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001410:	d101      	bne.n	8001416 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001412:	2001      	movs	r0, #1
}
 8001414:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001416:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001418:	2b00      	cmp	r3, #0
 800141a:	d104      	bne.n	8001426 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800141c:	0002      	movs	r2, r0
 800141e:	3270      	adds	r2, #112	; 0x70
 8001420:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001422:	f000 f89d 	bl	8001560 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001426:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001428:	2101      	movs	r1, #1
 800142a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800142c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800142e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001430:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001432:	438b      	bics	r3, r1
 8001434:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001436:	f7ff fdf1 	bl	800101c <UART_SetConfig>
 800143a:	2801      	cmp	r0, #1
 800143c:	d0e9      	beq.n	8001412 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800143e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001444:	0020      	movs	r0, r4
 8001446:	f7ff ff1b 	bl	8001280 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <HAL_UART_Init+0x60>)
 800144e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001450:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001452:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001454:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	438a      	bics	r2, r1
 800145c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800145e:	2201      	movs	r2, #1
 8001460:	6819      	ldr	r1, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001466:	f7ff ffa1 	bl	80013ac <UART_CheckIdleState>
 800146a:	e7d3      	b.n	8001414 <HAL_UART_Init+0x8>
 800146c:	ffffb7ff 	.word	0xffffb7ff

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b530      	push	{r4, r5, lr}
 8001472:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001474:	2238      	movs	r2, #56	; 0x38
 8001476:	2100      	movs	r1, #0
 8001478:	a810      	add	r0, sp, #64	; 0x40
 800147a:	f000 f923 	bl	80016c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147e:	2214      	movs	r2, #20
 8001480:	2100      	movs	r1, #0
 8001482:	a801      	add	r0, sp, #4
 8001484:	f000 f91e 	bl	80016c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	2228      	movs	r2, #40	; 0x28
 800148a:	2100      	movs	r1, #0
 800148c:	a806      	add	r0, sp, #24
 800148e:	f000 f919 	bl	80016c4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001492:	4912      	ldr	r1, [pc, #72]	; (80014dc <SystemClock_Config+0x6c>)
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <SystemClock_Config+0x70>)
 8001496:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001498:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800149a:	401a      	ands	r2, r3
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a8:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	025b      	lsls	r3, r3, #9
 80014ae:	9311      	str	r3, [sp, #68]	; 0x44
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014b0:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b2:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f7ff f964 	bl	8000780 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ba:	0021      	movs	r1, r4
 80014bc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014c0:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c6:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c8:	f7ff fbe6 	bl	8000c98 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014cc:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014ce:	9506      	str	r5, [sp, #24]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014d0:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	f7ff fcb9 	bl	8000e48 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80014d6:	b01f      	add	sp, #124	; 0x7c
 80014d8:	bd30      	pop	{r4, r5, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	40007000 	.word	0x40007000
 80014e0:	ffffe7ff 	.word	0xffffe7ff

080014e4 <main>:
{
 80014e4:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80014e6:	f7fe ffdd 	bl	80004a4 <HAL_Init>
  SystemClock_Config();
 80014ea:	f7ff ffc1 	bl	8001470 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	2080      	movs	r0, #128	; 0x80
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <main+0x54>)
 80014f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f4:	4301      	orrs	r1, r0
 80014f6:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	2101      	movs	r1, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	4002      	ands	r2, r0
 80014fe:	9200      	str	r2, [sp, #0]
 8001500:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  huart2.Instance = USART2;
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <main+0x58>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	430a      	orrs	r2, r1
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  huart2.Init.Mode = UART_MODE_TX_RX;
 800150c:	220c      	movs	r2, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	400b      	ands	r3, r1
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	9b01      	ldr	r3, [sp, #4]
  huart2.Instance = USART2;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <main+0x5c>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001516:	6142      	str	r2, [r0, #20]
  huart2.Instance = USART2;
 8001518:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800151a:	23e1      	movs	r3, #225	; 0xe1
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001520:	2300      	movs	r3, #0
 8001522:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001524:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001526:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001528:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800152a:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152c:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001530:	f7ff ff6c 	bl	800140c <HAL_UART_Init>
 8001534:	e7fe      	b.n	8001534 <main+0x50>
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	40021000 	.word	0x40021000
 800153c:	2000002c 	.word	0x2000002c
 8001540:	40004400 	.word	0x40004400

08001544 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001544:	2201      	movs	r2, #1
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_MspInit+0x18>)
 8001548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800154a:	430a      	orrs	r2, r1
 800154c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001552:	0552      	lsls	r2, r2, #21
 8001554:	430a      	orrs	r2, r1
 8001556:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001558:	4770      	bx	lr
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40021000 	.word	0x40021000

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b510      	push	{r4, lr}
 8001562:	0004      	movs	r4, r0
 8001564:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	2214      	movs	r2, #20
 8001568:	2100      	movs	r1, #0
 800156a:	a801      	add	r0, sp, #4
 800156c:	f000 f8aa 	bl	80016c4 <memset>
  if(huart->Instance==USART2)
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_UART_MspInit+0x54>)
 8001572:	6822      	ldr	r2, [r4, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d11a      	bne.n	80015ae <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_UART_MspInit+0x58>)
 800157c:	0292      	lsls	r2, r2, #10
 800157e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001582:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8001586:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	430a      	orrs	r2, r1
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	400b      	ands	r3, r1
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001598:	230c      	movs	r3, #12
 800159a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	3b0a      	subs	r3, #10
 800159e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	185b      	adds	r3, r3, r1
 80015a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80015a4:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80015a8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f7fe ffeb 	bl	8000584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ae:	b006      	add	sp, #24
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40021000 	.word	0x40021000

080015bc <NMI_Handler>:
 80015bc:	4770      	bx	lr

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	e7fe      	b.n	80015be <HardFault_Handler>

080015c0 <SVC_Handler>:
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c6:	f7fe ff81 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ca:	bd10      	pop	{r4, pc}

080015cc <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <SystemInit+0x44>)
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	6819      	ldr	r1, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	490e      	ldr	r1, [pc, #56]	; (8001614 <SystemInit+0x48>)
 80015dc:	400a      	ands	r2, r1
 80015de:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	490d      	ldr	r1, [pc, #52]	; (8001618 <SystemInit+0x4c>)
 80015e4:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80015e6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80015e8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	438a      	bics	r2, r1
 80015ee:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	490a      	ldr	r1, [pc, #40]	; (800161c <SystemInit+0x50>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	4909      	ldr	r1, [pc, #36]	; (8001620 <SystemInit+0x54>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <SystemInit+0x58>)
 8001608:	0512      	lsls	r2, r2, #20
 800160a:	609a      	str	r2, [r3, #8]
#endif
}
 800160c:	4770      	bx	lr
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40021000 	.word	0x40021000
 8001614:	88ff400c 	.word	0x88ff400c
 8001618:	fef6fff6 	.word	0xfef6fff6
 800161c:	fffbffff 	.word	0xfffbffff
 8001620:	ff02ffff 	.word	0xff02ffff
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800162a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800162c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800162e:	e003      	b.n	8001638 <LoopCopyDataInit>

08001630 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001632:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001634:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001636:	3104      	adds	r1, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <LoopForever+0xa>)
  ldr  r3, =_edata
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <LoopForever+0xe>)
  adds  r2, r0, r1
 800163c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800163e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001640:	d3f6      	bcc.n	8001630 <CopyDataInit>
  ldr  r2, =_sbss
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001644:	e002      	b.n	800164c <LoopFillZerobss>

08001646 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001646:	2300      	movs	r3, #0
  str  r3, [r2]
 8001648:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164a:	3204      	adds	r2, #4

0800164c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <LoopForever+0x16>)
  cmp  r2, r3
 800164e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001650:	d3f9      	bcc.n	8001646 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001652:	f7ff ffbb 	bl	80015cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001656:	f000 f811 	bl	800167c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff ff43 	bl	80014e4 <main>

0800165e <LoopForever>:

LoopForever:
    b LoopForever
 800165e:	e7fe      	b.n	800165e <LoopForever>
   ldr   r0, =_estack
 8001660:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8001664:	08001730 	.word	0x08001730
  ldr  r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800166c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001670:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001674:	200000ac 	.word	0x200000ac

08001678 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC1_COMP_IRQHandler>
	...

0800167c <__libc_init_array>:
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	2600      	movs	r6, #0
 8001680:	4d0c      	ldr	r5, [pc, #48]	; (80016b4 <__libc_init_array+0x38>)
 8001682:	4c0d      	ldr	r4, [pc, #52]	; (80016b8 <__libc_init_array+0x3c>)
 8001684:	1b64      	subs	r4, r4, r5
 8001686:	10a4      	asrs	r4, r4, #2
 8001688:	42a6      	cmp	r6, r4
 800168a:	d109      	bne.n	80016a0 <__libc_init_array+0x24>
 800168c:	2600      	movs	r6, #0
 800168e:	f000 f821 	bl	80016d4 <_init>
 8001692:	4d0a      	ldr	r5, [pc, #40]	; (80016bc <__libc_init_array+0x40>)
 8001694:	4c0a      	ldr	r4, [pc, #40]	; (80016c0 <__libc_init_array+0x44>)
 8001696:	1b64      	subs	r4, r4, r5
 8001698:	10a4      	asrs	r4, r4, #2
 800169a:	42a6      	cmp	r6, r4
 800169c:	d105      	bne.n	80016aa <__libc_init_array+0x2e>
 800169e:	bd70      	pop	{r4, r5, r6, pc}
 80016a0:	00b3      	lsls	r3, r6, #2
 80016a2:	58eb      	ldr	r3, [r5, r3]
 80016a4:	4798      	blx	r3
 80016a6:	3601      	adds	r6, #1
 80016a8:	e7ee      	b.n	8001688 <__libc_init_array+0xc>
 80016aa:	00b3      	lsls	r3, r6, #2
 80016ac:	58eb      	ldr	r3, [r5, r3]
 80016ae:	4798      	blx	r3
 80016b0:	3601      	adds	r6, #1
 80016b2:	e7f2      	b.n	800169a <__libc_init_array+0x1e>
 80016b4:	08001728 	.word	0x08001728
 80016b8:	08001728 	.word	0x08001728
 80016bc:	08001728 	.word	0x08001728
 80016c0:	0800172c 	.word	0x0800172c

080016c4 <memset>:
 80016c4:	0003      	movs	r3, r0
 80016c6:	1882      	adds	r2, r0, r2
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d100      	bne.n	80016ce <memset+0xa>
 80016cc:	4770      	bx	lr
 80016ce:	7019      	strb	r1, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	e7f9      	b.n	80016c8 <memset+0x4>

080016d4 <_init>:
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016da:	bc08      	pop	{r3}
 80016dc:	469e      	mov	lr, r3
 80016de:	4770      	bx	lr

080016e0 <_fini>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e6:	bc08      	pop	{r3}
 80016e8:	469e      	mov	lr, r3
 80016ea:	4770      	bx	lr
